Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> funlist
Rule 2     program -> empty
Rule 3     funlist -> funlist function
Rule 4     funlist -> function
Rule 5     function -> FUN ID ( arglist ) localslist BEGIN statementBlock END
Rule 6     function -> FUN ID ( error ) localslist BEGIN statementBlock END
Rule 7     function -> FUN error ( arglist ) localslist BEGIN statementBlock END
Rule 8     function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END
Rule 9     function -> FUN ID ( arglist ) localslist error statementBlock END
Rule 10    function -> FUN ID ( arglist ) localslist BEGIN statementBlock error
Rule 11    function -> FUN ID ( arglist ) localslist BEGIN error END
Rule 12    arglist -> args
Rule 13    arglist -> empty
Rule 14    arglist -> args ,
Rule 15    args -> var_decl
Rule 16    args -> args , var_decl
Rule 17    args -> args var_decl
Rule 18    localslist -> locals
Rule 19    localslist -> empty
Rule 20    locals -> locals var_or_fun
Rule 21    var_or_fun -> var_decl ;
Rule 22    var_or_fun -> function ;
Rule 23    locals -> var_decl ;
Rule 24    locals -> function ;
Rule 25    locals -> var_decl
Rule 26    var_or_fun -> var_decl error
Rule 27    locals -> function
Rule 28    var_or_fun -> function error
Rule 29    var_decl -> ID : type_specifier
Rule 30    var_decl -> ID type_specifier
Rule 31    var_decl -> ID ASIGN type_specifier
Rule 32    type_specifier -> simple_type
Rule 33    type_specifier -> simple_type [ INTEGER ]
Rule 34    simple_type -> INT
Rule 35    simple_type -> FLOAT
Rule 36    statementBlock -> statementBlock ; statement
Rule 37    statementBlock -> statement
Rule 38    statementBlock -> statementBlock statement
Rule 39    statement -> WHILE relation DO statement
Rule 40    statement -> ifthen
Rule 41    statement -> ifthenelse
Rule 42    statement -> location ASIGN expression
Rule 43    statement -> inOutExpr
Rule 44    statement -> RETURN expression
Rule 45    statement -> RETURN empty
Rule 46    statement -> functionCall
Rule 47    statement -> SKIP
Rule 48    statement -> BREAK
Rule 49    statement -> BEGIN statementBlock END
Rule 50    statement -> BEGIN END
Rule 51    ifthen -> IF relation THEN statement
Rule 52    ifthenelse -> IF relation THEN statement ELSE statement
Rule 53    ifthen -> IF relation statement
Rule 54    ifthenelse -> IF relation statement ELSE statement
Rule 55    functionCall -> ID ( paramslistop )
Rule 56    paramslistop -> paramList
Rule 57    paramslistop -> empty
Rule 58    paramList -> paramList , expression
Rule 59    paramList -> expression
Rule 60    inOutExpr -> PRINT ( STRING )
Rule 61    inOutExpr -> WRITE ( expression )
Rule 62    inOutExpr -> READ ( location )
Rule 63    location -> ID
Rule 64    location -> ID [ expression ]
Rule 65    relation -> relation OR relation
Rule 66    relation -> relation AND relation
Rule 67    relation -> NOT relation
Rule 68    relation -> ( relation )
Rule 69    relation -> expression LT expression
Rule 70    relation -> expression LE expression
Rule 71    relation -> expression GT expression
Rule 72    relation -> expression GE expression
Rule 73    relation -> expression NE expression
Rule 74    relation -> expression EQUAL expression
Rule 75    expression -> expression + expression
Rule 76    expression -> expression - expression
Rule 77    expression -> expression * expression
Rule 78    expression -> expression / expression
Rule 79    expression -> - expression
Rule 80    expression -> + expression
Rule 81    expression -> ( expression )
Rule 82    expression -> ID
Rule 83    expression -> number
Rule 84    expression -> ID [ expression ]
Rule 85    expression -> casting
Rule 86    expression -> functionCall
Rule 87    casting -> INT ( expression )
Rule 88    casting -> FLOAT ( expression )
Rule 89    number -> INTEGER
Rule 90    number -> FLOATNUM
Rule 91    empty -> <empty>

Terminals, with rules where they appear

(                    : 5 6 7 8 9 10 11 55 60 61 62 68 81 87 88
)                    : 5 6 7 8 9 10 11 55 60 61 62 68 81 87 88
*                    : 77
+                    : 75 80
,                    : 14 16 58
-                    : 76 79
/                    : 78
:                    : 29
;                    : 8 21 22 23 24 36
AND                  : 66
ASIGN                : 31 42
BEGIN                : 5 6 7 8 10 11 49 50
BREAK                : 48
DO                   : 39
ELSE                 : 52 54
END                  : 5 6 7 8 9 11 49 50
EQUAL                : 74
FLOAT                : 35 88
FLOATNUM             : 90
FUN                  : 5 6 7 8 9 10 11
GE                   : 72
GT                   : 71
ID                   : 5 6 8 9 10 11 29 30 31 55 63 64 82 84
IF                   : 51 52 53 54
INT                  : 34 87
INTEGER              : 33 89
LE                   : 70
LT                   : 69
NE                   : 73
NEWLINE              : 
NOT                  : 67
OR                   : 65
PRINT                : 60
READ                 : 62
RETURN               : 44 45
SKIP                 : 47
STRING               : 60
THEN                 : 51 52
WHILE                : 39
WRITE                : 61
[                    : 33 64 84
]                    : 33 64 84
error                : 6 7 9 10 11 26 28

Nonterminals, with rules where they appear

arglist              : 5 7 8 9 10 11
args                 : 12 14 16 17
casting              : 85
empty                : 2 13 19 45 57
expression           : 42 44 58 59 61 64 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 80 81 84 87 88
function             : 3 4 22 24 27 28
functionCall         : 46 86
funlist              : 1 3
ifthen               : 40
ifthenelse           : 41
inOutExpr            : 43
locals               : 18 20
localslist           : 5 6 7 8 9 10 11
location             : 42 62
number               : 83
paramList            : 56 58
paramslistop         : 55
program              : 0
relation             : 39 51 52 53 54 65 65 66 66 67 68
simple_type          : 32 33
statement            : 36 37 38 39 51 52 52 53 54 54
statementBlock       : 5 6 7 8 9 10 36 38 49
type_specifier       : 29 30 31
var_decl             : 15 16 17 21 23 25 26
var_or_fun           : 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funlist
    (2) program -> . empty
    (3) funlist -> . funlist function
    (4) funlist -> . function
    (91) empty -> .
    (5) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> . FUN ID ( error ) localslist BEGIN statementBlock END
    (7) function -> . FUN error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> . FUN ID ( arglist ) localslist error statementBlock END
    (10) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> . FUN ID ( arglist ) localslist BEGIN error END

    $end            reduce using rule 91 (empty -> .)
    FUN             shift and go to state 4

    function                       shift and go to state 1
    funlist                        shift and go to state 2
    program                        shift and go to state 3
    empty                          shift and go to state 5

state 1

    (4) funlist -> function .

    FUN             reduce using rule 4 (funlist -> function .)
    $end            reduce using rule 4 (funlist -> function .)


state 2

    (1) program -> funlist .
    (3) funlist -> funlist . function
    (5) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> . FUN ID ( error ) localslist BEGIN statementBlock END
    (7) function -> . FUN error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> . FUN ID ( arglist ) localslist error statementBlock END
    (10) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> . FUN ID ( arglist ) localslist BEGIN error END

    $end            reduce using rule 1 (program -> funlist .)
    FUN             shift and go to state 4

    function                       shift and go to state 6

state 3

    (0) S' -> program .



state 4

    (5) function -> FUN . ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> FUN . ID ( error ) localslist BEGIN statementBlock END
    (7) function -> FUN . error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> FUN . ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> FUN . ID ( arglist ) localslist error statementBlock END
    (10) function -> FUN . ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> FUN . ID ( arglist ) localslist BEGIN error END

    ID              shift and go to state 8
    error           shift and go to state 7


state 5

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 6

    (3) funlist -> funlist function .

    FUN             reduce using rule 3 (funlist -> funlist function .)
    $end            reduce using rule 3 (funlist -> funlist function .)


state 7

    (7) function -> FUN error . ( arglist ) localslist BEGIN statementBlock END

    (               shift and go to state 9


state 8

    (5) function -> FUN ID . ( arglist ) localslist BEGIN statementBlock END
    (6) function -> FUN ID . ( error ) localslist BEGIN statementBlock END
    (8) function -> FUN ID . ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> FUN ID . ( arglist ) localslist error statementBlock END
    (10) function -> FUN ID . ( arglist ) localslist BEGIN statementBlock error
    (11) function -> FUN ID . ( arglist ) localslist BEGIN error END

    (               shift and go to state 10


state 9

    (7) function -> FUN error ( . arglist ) localslist BEGIN statementBlock END
    (12) arglist -> . args
    (13) arglist -> . empty
    (14) arglist -> . args ,
    (15) args -> . var_decl
    (16) args -> . args , var_decl
    (17) args -> . args var_decl
    (91) empty -> .
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier

    )               reduce using rule 91 (empty -> .)
    ID              shift and go to state 14

    args                           shift and go to state 11
    var_decl                       shift and go to state 12
    arglist                        shift and go to state 13
    empty                          shift and go to state 15

state 10

    (5) function -> FUN ID ( . arglist ) localslist BEGIN statementBlock END
    (6) function -> FUN ID ( . error ) localslist BEGIN statementBlock END
    (8) function -> FUN ID ( . arglist ) localslist BEGIN statementBlock ; END
    (9) function -> FUN ID ( . arglist ) localslist error statementBlock END
    (10) function -> FUN ID ( . arglist ) localslist BEGIN statementBlock error
    (11) function -> FUN ID ( . arglist ) localslist BEGIN error END
    (12) arglist -> . args
    (13) arglist -> . empty
    (14) arglist -> . args ,
    (15) args -> . var_decl
    (16) args -> . args , var_decl
    (17) args -> . args var_decl
    (91) empty -> .
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier

    error           shift and go to state 16
    )               reduce using rule 91 (empty -> .)
    ID              shift and go to state 14

    args                           shift and go to state 11
    var_decl                       shift and go to state 12
    arglist                        shift and go to state 17
    empty                          shift and go to state 15

state 11

    (12) arglist -> args .
    (14) arglist -> args . ,
    (16) args -> args . , var_decl
    (17) args -> args . var_decl
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier

    )               reduce using rule 12 (arglist -> args .)
    ,               shift and go to state 18
    ID              shift and go to state 14

    var_decl                       shift and go to state 19

state 12

    (15) args -> var_decl .

    ,               reduce using rule 15 (args -> var_decl .)
    ID              reduce using rule 15 (args -> var_decl .)
    )               reduce using rule 15 (args -> var_decl .)


state 13

    (7) function -> FUN error ( arglist . ) localslist BEGIN statementBlock END

    )               shift and go to state 20


state 14

    (29) var_decl -> ID . : type_specifier
    (30) var_decl -> ID . type_specifier
    (31) var_decl -> ID . ASIGN type_specifier
    (32) type_specifier -> . simple_type
    (33) type_specifier -> . simple_type [ INTEGER ]
    (34) simple_type -> . INT
    (35) simple_type -> . FLOAT

    :               shift and go to state 26
    ASIGN           shift and go to state 25
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    type_specifier                 shift and go to state 21
    simple_type                    shift and go to state 22

state 15

    (13) arglist -> empty .

    )               reduce using rule 13 (arglist -> empty .)


state 16

    (6) function -> FUN ID ( error . ) localslist BEGIN statementBlock END

    )               shift and go to state 27


state 17

    (5) function -> FUN ID ( arglist . ) localslist BEGIN statementBlock END
    (8) function -> FUN ID ( arglist . ) localslist BEGIN statementBlock ; END
    (9) function -> FUN ID ( arglist . ) localslist error statementBlock END
    (10) function -> FUN ID ( arglist . ) localslist BEGIN statementBlock error
    (11) function -> FUN ID ( arglist . ) localslist BEGIN error END

    )               shift and go to state 28


state 18

    (14) arglist -> args , .
    (16) args -> args , . var_decl
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier

    )               reduce using rule 14 (arglist -> args , .)
    ID              shift and go to state 14

    var_decl                       shift and go to state 29

state 19

    (17) args -> args var_decl .

    ,               reduce using rule 17 (args -> args var_decl .)
    ID              reduce using rule 17 (args -> args var_decl .)
    )               reduce using rule 17 (args -> args var_decl .)


state 20

    (7) function -> FUN error ( arglist ) . localslist BEGIN statementBlock END
    (18) localslist -> . locals
    (19) localslist -> . empty
    (20) locals -> . locals var_or_fun
    (23) locals -> . var_decl ;
    (24) locals -> . function ;
    (25) locals -> . var_decl
    (27) locals -> . function
    (91) empty -> .
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> . FUN ID ( error ) localslist BEGIN statementBlock END
    (7) function -> . FUN error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> . FUN ID ( arglist ) localslist error statementBlock END
    (10) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> . FUN ID ( arglist ) localslist BEGIN error END

    BEGIN           reduce using rule 91 (empty -> .)
    ID              shift and go to state 14
    FUN             shift and go to state 4

    function                       shift and go to state 30
    localslist                     shift and go to state 31
    var_decl                       shift and go to state 32
    locals                         shift and go to state 34
    empty                          shift and go to state 33

state 21

    (30) var_decl -> ID type_specifier .

    ;               reduce using rule 30 (var_decl -> ID type_specifier .)
    ID              reduce using rule 30 (var_decl -> ID type_specifier .)
    FUN             reduce using rule 30 (var_decl -> ID type_specifier .)
    BEGIN           reduce using rule 30 (var_decl -> ID type_specifier .)
    ,               reduce using rule 30 (var_decl -> ID type_specifier .)
    )               reduce using rule 30 (var_decl -> ID type_specifier .)
    error           reduce using rule 30 (var_decl -> ID type_specifier .)


state 22

    (32) type_specifier -> simple_type .
    (33) type_specifier -> simple_type . [ INTEGER ]

    ,               reduce using rule 32 (type_specifier -> simple_type .)
    ID              reduce using rule 32 (type_specifier -> simple_type .)
    )               reduce using rule 32 (type_specifier -> simple_type .)
    ;               reduce using rule 32 (type_specifier -> simple_type .)
    FUN             reduce using rule 32 (type_specifier -> simple_type .)
    BEGIN           reduce using rule 32 (type_specifier -> simple_type .)
    error           reduce using rule 32 (type_specifier -> simple_type .)
    [               shift and go to state 35


state 23

    (34) simple_type -> INT .

    [               reduce using rule 34 (simple_type -> INT .)
    ,               reduce using rule 34 (simple_type -> INT .)
    ID              reduce using rule 34 (simple_type -> INT .)
    )               reduce using rule 34 (simple_type -> INT .)
    ;               reduce using rule 34 (simple_type -> INT .)
    FUN             reduce using rule 34 (simple_type -> INT .)
    BEGIN           reduce using rule 34 (simple_type -> INT .)
    error           reduce using rule 34 (simple_type -> INT .)


state 24

    (35) simple_type -> FLOAT .

    [               reduce using rule 35 (simple_type -> FLOAT .)
    ,               reduce using rule 35 (simple_type -> FLOAT .)
    ID              reduce using rule 35 (simple_type -> FLOAT .)
    )               reduce using rule 35 (simple_type -> FLOAT .)
    ;               reduce using rule 35 (simple_type -> FLOAT .)
    FUN             reduce using rule 35 (simple_type -> FLOAT .)
    BEGIN           reduce using rule 35 (simple_type -> FLOAT .)
    error           reduce using rule 35 (simple_type -> FLOAT .)


state 25

    (31) var_decl -> ID ASIGN . type_specifier
    (32) type_specifier -> . simple_type
    (33) type_specifier -> . simple_type [ INTEGER ]
    (34) simple_type -> . INT
    (35) simple_type -> . FLOAT

    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    type_specifier                 shift and go to state 36
    simple_type                    shift and go to state 22

state 26

    (29) var_decl -> ID : . type_specifier
    (32) type_specifier -> . simple_type
    (33) type_specifier -> . simple_type [ INTEGER ]
    (34) simple_type -> . INT
    (35) simple_type -> . FLOAT

    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    type_specifier                 shift and go to state 37
    simple_type                    shift and go to state 22

state 27

    (6) function -> FUN ID ( error ) . localslist BEGIN statementBlock END
    (18) localslist -> . locals
    (19) localslist -> . empty
    (20) locals -> . locals var_or_fun
    (23) locals -> . var_decl ;
    (24) locals -> . function ;
    (25) locals -> . var_decl
    (27) locals -> . function
    (91) empty -> .
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> . FUN ID ( error ) localslist BEGIN statementBlock END
    (7) function -> . FUN error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> . FUN ID ( arglist ) localslist error statementBlock END
    (10) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> . FUN ID ( arglist ) localslist BEGIN error END

    BEGIN           reduce using rule 91 (empty -> .)
    ID              shift and go to state 14
    FUN             shift and go to state 4

    function                       shift and go to state 30
    localslist                     shift and go to state 38
    var_decl                       shift and go to state 32
    locals                         shift and go to state 34
    empty                          shift and go to state 33

state 28

    (5) function -> FUN ID ( arglist ) . localslist BEGIN statementBlock END
    (8) function -> FUN ID ( arglist ) . localslist BEGIN statementBlock ; END
    (9) function -> FUN ID ( arglist ) . localslist error statementBlock END
    (10) function -> FUN ID ( arglist ) . localslist BEGIN statementBlock error
    (11) function -> FUN ID ( arglist ) . localslist BEGIN error END
    (18) localslist -> . locals
    (19) localslist -> . empty
    (20) locals -> . locals var_or_fun
    (23) locals -> . var_decl ;
    (24) locals -> . function ;
    (25) locals -> . var_decl
    (27) locals -> . function
    (91) empty -> .
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> . FUN ID ( error ) localslist BEGIN statementBlock END
    (7) function -> . FUN error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> . FUN ID ( arglist ) localslist error statementBlock END
    (10) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> . FUN ID ( arglist ) localslist BEGIN error END

    BEGIN           reduce using rule 91 (empty -> .)
    error           reduce using rule 91 (empty -> .)
    ID              shift and go to state 14
    FUN             shift and go to state 4

    function                       shift and go to state 30
    localslist                     shift and go to state 39
    var_decl                       shift and go to state 32
    locals                         shift and go to state 34
    empty                          shift and go to state 33

state 29

    (16) args -> args , var_decl .

    ,               reduce using rule 16 (args -> args , var_decl .)
    ID              reduce using rule 16 (args -> args , var_decl .)
    )               reduce using rule 16 (args -> args , var_decl .)


state 30

    (24) locals -> function . ;
    (27) locals -> function .

    ;               shift and go to state 40
    ID              reduce using rule 27 (locals -> function .)
    FUN             reduce using rule 27 (locals -> function .)
    BEGIN           reduce using rule 27 (locals -> function .)
    error           reduce using rule 27 (locals -> function .)


state 31

    (7) function -> FUN error ( arglist ) localslist . BEGIN statementBlock END

    BEGIN           shift and go to state 41


state 32

    (23) locals -> var_decl . ;
    (25) locals -> var_decl .

    ;               shift and go to state 42
    ID              reduce using rule 25 (locals -> var_decl .)
    FUN             reduce using rule 25 (locals -> var_decl .)
    BEGIN           reduce using rule 25 (locals -> var_decl .)
    error           reduce using rule 25 (locals -> var_decl .)


state 33

    (19) localslist -> empty .

    BEGIN           reduce using rule 19 (localslist -> empty .)
    error           reduce using rule 19 (localslist -> empty .)


state 34

    (18) localslist -> locals .
    (20) locals -> locals . var_or_fun
    (21) var_or_fun -> . var_decl ;
    (22) var_or_fun -> . function ;
    (26) var_or_fun -> . var_decl error
    (28) var_or_fun -> . function error
    (29) var_decl -> . ID : type_specifier
    (30) var_decl -> . ID type_specifier
    (31) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock END
    (6) function -> . FUN ID ( error ) localslist BEGIN statementBlock END
    (7) function -> . FUN error ( arglist ) localslist BEGIN statementBlock END
    (8) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock ; END
    (9) function -> . FUN ID ( arglist ) localslist error statementBlock END
    (10) function -> . FUN ID ( arglist ) localslist BEGIN statementBlock error
    (11) function -> . FUN ID ( arglist ) localslist BEGIN error END

    BEGIN           reduce using rule 18 (localslist -> locals .)
    error           reduce using rule 18 (localslist -> locals .)
    ID              shift and go to state 14
    FUN             shift and go to state 4

    function                       shift and go to state 43
    var_or_fun                     shift and go to state 44
    var_decl                       shift and go to state 45

state 35

    (33) type_specifier -> simple_type [ . INTEGER ]

    INTEGER         shift and go to state 46


state 36

    (31) var_decl -> ID ASIGN type_specifier .

    ;               reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)
    ID              reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)
    FUN             reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)
    BEGIN           reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)
    ,               reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)
    )               reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)
    error           reduce using rule 31 (var_decl -> ID ASIGN type_specifier .)


state 37

    (29) var_decl -> ID : type_specifier .

    ;               reduce using rule 29 (var_decl -> ID : type_specifier .)
    ID              reduce using rule 29 (var_decl -> ID : type_specifier .)
    FUN             reduce using rule 29 (var_decl -> ID : type_specifier .)
    BEGIN           reduce using rule 29 (var_decl -> ID : type_specifier .)
    ,               reduce using rule 29 (var_decl -> ID : type_specifier .)
    )               reduce using rule 29 (var_decl -> ID : type_specifier .)
    error           reduce using rule 29 (var_decl -> ID : type_specifier .)


state 38

    (6) function -> FUN ID ( error ) localslist . BEGIN statementBlock END

    BEGIN           shift and go to state 47


state 39

    (5) function -> FUN ID ( arglist ) localslist . BEGIN statementBlock END
    (8) function -> FUN ID ( arglist ) localslist . BEGIN statementBlock ; END
    (9) function -> FUN ID ( arglist ) localslist . error statementBlock END
    (10) function -> FUN ID ( arglist ) localslist . BEGIN statementBlock error
    (11) function -> FUN ID ( arglist ) localslist . BEGIN error END

    BEGIN           shift and go to state 48
    error           shift and go to state 49


state 40

    (24) locals -> function ; .

    ID              reduce using rule 24 (locals -> function ; .)
    FUN             reduce using rule 24 (locals -> function ; .)
    BEGIN           reduce using rule 24 (locals -> function ; .)
    error           reduce using rule 24 (locals -> function ; .)


state 41

    (7) function -> FUN error ( arglist ) localslist BEGIN . statementBlock END
    (36) statementBlock -> . statementBlock ; statement
    (37) statementBlock -> . statement
    (38) statementBlock -> . statementBlock statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    statementBlock                 shift and go to state 50
    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 59
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 42

    (23) locals -> var_decl ; .

    ID              reduce using rule 23 (locals -> var_decl ; .)
    FUN             reduce using rule 23 (locals -> var_decl ; .)
    BEGIN           reduce using rule 23 (locals -> var_decl ; .)
    error           reduce using rule 23 (locals -> var_decl ; .)


state 43

    (22) var_or_fun -> function . ;
    (28) var_or_fun -> function . error

    ;               shift and go to state 67
    error           shift and go to state 68


state 44

    (20) locals -> locals var_or_fun .

    ID              reduce using rule 20 (locals -> locals var_or_fun .)
    FUN             reduce using rule 20 (locals -> locals var_or_fun .)
    BEGIN           reduce using rule 20 (locals -> locals var_or_fun .)
    error           reduce using rule 20 (locals -> locals var_or_fun .)


state 45

    (21) var_or_fun -> var_decl . ;
    (26) var_or_fun -> var_decl . error

    ;               shift and go to state 69
    error           shift and go to state 70


state 46

    (33) type_specifier -> simple_type [ INTEGER . ]

    ]               shift and go to state 71


state 47

    (6) function -> FUN ID ( error ) localslist BEGIN . statementBlock END
    (36) statementBlock -> . statementBlock ; statement
    (37) statementBlock -> . statement
    (38) statementBlock -> . statementBlock statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    statementBlock                 shift and go to state 72
    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 59
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 48

    (5) function -> FUN ID ( arglist ) localslist BEGIN . statementBlock END
    (8) function -> FUN ID ( arglist ) localslist BEGIN . statementBlock ; END
    (10) function -> FUN ID ( arglist ) localslist BEGIN . statementBlock error
    (11) function -> FUN ID ( arglist ) localslist BEGIN . error END
    (36) statementBlock -> . statementBlock ; statement
    (37) statementBlock -> . statement
    (38) statementBlock -> . statementBlock statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    error           shift and go to state 74
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    statementBlock                 shift and go to state 73
    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 59
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 49

    (9) function -> FUN ID ( arglist ) localslist error . statementBlock END
    (36) statementBlock -> . statementBlock ; statement
    (37) statementBlock -> . statement
    (38) statementBlock -> . statementBlock statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    statementBlock                 shift and go to state 75
    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 59
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 50

    (7) function -> FUN error ( arglist ) localslist BEGIN statementBlock . END
    (36) statementBlock -> statementBlock . ; statement
    (38) statementBlock -> statementBlock . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 78
    ;               shift and go to state 77
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 76
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 51

    (44) statement -> RETURN . expression
    (45) statement -> RETURN . empty
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (91) empty -> .
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

  ! shift/reduce conflict for ID resolved as shift
    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    END             reduce using rule 91 (empty -> .)
    ;               reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    SKIP            reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    BEGIN           reduce using rule 91 (empty -> .)
    IF              reduce using rule 91 (empty -> .)
    PRINT           reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    error           reduce using rule 91 (empty -> .)
    ELSE            reduce using rule 91 (empty -> .)
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

  ! ID              [ reduce using rule 91 (empty -> .) ]

    casting                        shift and go to state 88
    number                         shift and go to state 83
    functionCall                   shift and go to state 85
    expression                     shift and go to state 89
    empty                          shift and go to state 91

state 52

    (62) inOutExpr -> READ . ( location )

    (               shift and go to state 92


state 53

    (43) statement -> inOutExpr .

    END             reduce using rule 43 (statement -> inOutExpr .)
    ;               reduce using rule 43 (statement -> inOutExpr .)
    WHILE           reduce using rule 43 (statement -> inOutExpr .)
    RETURN          reduce using rule 43 (statement -> inOutExpr .)
    SKIP            reduce using rule 43 (statement -> inOutExpr .)
    BREAK           reduce using rule 43 (statement -> inOutExpr .)
    BEGIN           reduce using rule 43 (statement -> inOutExpr .)
    IF              reduce using rule 43 (statement -> inOutExpr .)
    ID              reduce using rule 43 (statement -> inOutExpr .)
    PRINT           reduce using rule 43 (statement -> inOutExpr .)
    WRITE           reduce using rule 43 (statement -> inOutExpr .)
    READ            reduce using rule 43 (statement -> inOutExpr .)
    error           reduce using rule 43 (statement -> inOutExpr .)
    ELSE            reduce using rule 43 (statement -> inOutExpr .)


state 54

    (60) inOutExpr -> PRINT . ( STRING )

    (               shift and go to state 93


state 55

    (39) statement -> WHILE . relation DO statement
    (65) relation -> . relation OR relation
    (66) relation -> . relation AND relation
    (67) relation -> . NOT relation
    (68) relation -> . ( relation )
    (69) relation -> . expression LT expression
    (70) relation -> . expression LE expression
    (71) relation -> . expression GT expression
    (72) relation -> . expression GE expression
    (73) relation -> . expression NE expression
    (74) relation -> . expression EQUAL expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 96
    (               shift and go to state 95
    -               shift and go to state 82
    +               shift and go to state 81
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    functionCall                   shift and go to state 85
    relation                       shift and go to state 94
    expression                     shift and go to state 97

state 56

    (40) statement -> ifthen .

    END             reduce using rule 40 (statement -> ifthen .)
    ;               reduce using rule 40 (statement -> ifthen .)
    WHILE           reduce using rule 40 (statement -> ifthen .)
    RETURN          reduce using rule 40 (statement -> ifthen .)
    SKIP            reduce using rule 40 (statement -> ifthen .)
    BREAK           reduce using rule 40 (statement -> ifthen .)
    BEGIN           reduce using rule 40 (statement -> ifthen .)
    IF              reduce using rule 40 (statement -> ifthen .)
    ID              reduce using rule 40 (statement -> ifthen .)
    PRINT           reduce using rule 40 (statement -> ifthen .)
    WRITE           reduce using rule 40 (statement -> ifthen .)
    READ            reduce using rule 40 (statement -> ifthen .)
    error           reduce using rule 40 (statement -> ifthen .)
    ELSE            reduce using rule 40 (statement -> ifthen .)


state 57

    (49) statement -> BEGIN . statementBlock END
    (50) statement -> BEGIN . END
    (36) statementBlock -> . statementBlock ; statement
    (37) statementBlock -> . statement
    (38) statementBlock -> . statementBlock statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 99
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    statementBlock                 shift and go to state 98
    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 59
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 58

    (42) statement -> location . ASIGN expression

    ASIGN           shift and go to state 100


state 59

    (37) statementBlock -> statement .

    END             reduce using rule 37 (statementBlock -> statement .)
    ;               reduce using rule 37 (statementBlock -> statement .)
    WHILE           reduce using rule 37 (statementBlock -> statement .)
    RETURN          reduce using rule 37 (statementBlock -> statement .)
    SKIP            reduce using rule 37 (statementBlock -> statement .)
    BREAK           reduce using rule 37 (statementBlock -> statement .)
    BEGIN           reduce using rule 37 (statementBlock -> statement .)
    IF              reduce using rule 37 (statementBlock -> statement .)
    ID              reduce using rule 37 (statementBlock -> statement .)
    PRINT           reduce using rule 37 (statementBlock -> statement .)
    WRITE           reduce using rule 37 (statementBlock -> statement .)
    READ            reduce using rule 37 (statementBlock -> statement .)
    error           reduce using rule 37 (statementBlock -> statement .)


state 60

    (41) statement -> ifthenelse .

    END             reduce using rule 41 (statement -> ifthenelse .)
    ;               reduce using rule 41 (statement -> ifthenelse .)
    WHILE           reduce using rule 41 (statement -> ifthenelse .)
    RETURN          reduce using rule 41 (statement -> ifthenelse .)
    SKIP            reduce using rule 41 (statement -> ifthenelse .)
    BREAK           reduce using rule 41 (statement -> ifthenelse .)
    BEGIN           reduce using rule 41 (statement -> ifthenelse .)
    IF              reduce using rule 41 (statement -> ifthenelse .)
    ID              reduce using rule 41 (statement -> ifthenelse .)
    PRINT           reduce using rule 41 (statement -> ifthenelse .)
    WRITE           reduce using rule 41 (statement -> ifthenelse .)
    READ            reduce using rule 41 (statement -> ifthenelse .)
    error           reduce using rule 41 (statement -> ifthenelse .)
    ELSE            reduce using rule 41 (statement -> ifthenelse .)


state 61

    (47) statement -> SKIP .

    END             reduce using rule 47 (statement -> SKIP .)
    ;               reduce using rule 47 (statement -> SKIP .)
    WHILE           reduce using rule 47 (statement -> SKIP .)
    RETURN          reduce using rule 47 (statement -> SKIP .)
    SKIP            reduce using rule 47 (statement -> SKIP .)
    BREAK           reduce using rule 47 (statement -> SKIP .)
    BEGIN           reduce using rule 47 (statement -> SKIP .)
    IF              reduce using rule 47 (statement -> SKIP .)
    ID              reduce using rule 47 (statement -> SKIP .)
    PRINT           reduce using rule 47 (statement -> SKIP .)
    WRITE           reduce using rule 47 (statement -> SKIP .)
    READ            reduce using rule 47 (statement -> SKIP .)
    error           reduce using rule 47 (statement -> SKIP .)
    ELSE            reduce using rule 47 (statement -> SKIP .)


state 62

    (61) inOutExpr -> WRITE . ( expression )

    (               shift and go to state 101


state 63

    (46) statement -> functionCall .

    END             reduce using rule 46 (statement -> functionCall .)
    ;               reduce using rule 46 (statement -> functionCall .)
    WHILE           reduce using rule 46 (statement -> functionCall .)
    RETURN          reduce using rule 46 (statement -> functionCall .)
    SKIP            reduce using rule 46 (statement -> functionCall .)
    BREAK           reduce using rule 46 (statement -> functionCall .)
    BEGIN           reduce using rule 46 (statement -> functionCall .)
    IF              reduce using rule 46 (statement -> functionCall .)
    ID              reduce using rule 46 (statement -> functionCall .)
    PRINT           reduce using rule 46 (statement -> functionCall .)
    WRITE           reduce using rule 46 (statement -> functionCall .)
    READ            reduce using rule 46 (statement -> functionCall .)
    error           reduce using rule 46 (statement -> functionCall .)
    ELSE            reduce using rule 46 (statement -> functionCall .)


state 64

    (63) location -> ID .
    (64) location -> ID . [ expression ]
    (55) functionCall -> ID . ( paramslistop )

    ASIGN           reduce using rule 63 (location -> ID .)
    [               shift and go to state 103
    (               shift and go to state 102


state 65

    (51) ifthen -> IF . relation THEN statement
    (53) ifthen -> IF . relation statement
    (52) ifthenelse -> IF . relation THEN statement ELSE statement
    (54) ifthenelse -> IF . relation statement ELSE statement
    (65) relation -> . relation OR relation
    (66) relation -> . relation AND relation
    (67) relation -> . NOT relation
    (68) relation -> . ( relation )
    (69) relation -> . expression LT expression
    (70) relation -> . expression LE expression
    (71) relation -> . expression GT expression
    (72) relation -> . expression GE expression
    (73) relation -> . expression NE expression
    (74) relation -> . expression EQUAL expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 96
    (               shift and go to state 95
    -               shift and go to state 82
    +               shift and go to state 81
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    functionCall                   shift and go to state 85
    relation                       shift and go to state 104
    expression                     shift and go to state 97

state 66

    (48) statement -> BREAK .

    END             reduce using rule 48 (statement -> BREAK .)
    ;               reduce using rule 48 (statement -> BREAK .)
    WHILE           reduce using rule 48 (statement -> BREAK .)
    RETURN          reduce using rule 48 (statement -> BREAK .)
    SKIP            reduce using rule 48 (statement -> BREAK .)
    BREAK           reduce using rule 48 (statement -> BREAK .)
    BEGIN           reduce using rule 48 (statement -> BREAK .)
    IF              reduce using rule 48 (statement -> BREAK .)
    ID              reduce using rule 48 (statement -> BREAK .)
    PRINT           reduce using rule 48 (statement -> BREAK .)
    WRITE           reduce using rule 48 (statement -> BREAK .)
    READ            reduce using rule 48 (statement -> BREAK .)
    error           reduce using rule 48 (statement -> BREAK .)
    ELSE            reduce using rule 48 (statement -> BREAK .)


state 67

    (22) var_or_fun -> function ; .

    ID              reduce using rule 22 (var_or_fun -> function ; .)
    FUN             reduce using rule 22 (var_or_fun -> function ; .)
    BEGIN           reduce using rule 22 (var_or_fun -> function ; .)
    error           reduce using rule 22 (var_or_fun -> function ; .)


state 68

    (28) var_or_fun -> function error .

    ID              reduce using rule 28 (var_or_fun -> function error .)
    FUN             reduce using rule 28 (var_or_fun -> function error .)
    BEGIN           reduce using rule 28 (var_or_fun -> function error .)
    error           reduce using rule 28 (var_or_fun -> function error .)


state 69

    (21) var_or_fun -> var_decl ; .

    ID              reduce using rule 21 (var_or_fun -> var_decl ; .)
    FUN             reduce using rule 21 (var_or_fun -> var_decl ; .)
    BEGIN           reduce using rule 21 (var_or_fun -> var_decl ; .)
    error           reduce using rule 21 (var_or_fun -> var_decl ; .)


state 70

    (26) var_or_fun -> var_decl error .

    ID              reduce using rule 26 (var_or_fun -> var_decl error .)
    FUN             reduce using rule 26 (var_or_fun -> var_decl error .)
    BEGIN           reduce using rule 26 (var_or_fun -> var_decl error .)
    error           reduce using rule 26 (var_or_fun -> var_decl error .)


state 71

    (33) type_specifier -> simple_type [ INTEGER ] .

    ,               reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)
    ID              reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)
    )               reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)
    ;               reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)
    FUN             reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)
    BEGIN           reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)
    error           reduce using rule 33 (type_specifier -> simple_type [ INTEGER ] .)


state 72

    (6) function -> FUN ID ( error ) localslist BEGIN statementBlock . END
    (36) statementBlock -> statementBlock . ; statement
    (38) statementBlock -> statementBlock . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 105
    ;               shift and go to state 77
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 76
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 73

    (5) function -> FUN ID ( arglist ) localslist BEGIN statementBlock . END
    (8) function -> FUN ID ( arglist ) localslist BEGIN statementBlock . ; END
    (10) function -> FUN ID ( arglist ) localslist BEGIN statementBlock . error
    (36) statementBlock -> statementBlock . ; statement
    (38) statementBlock -> statementBlock . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 107
    ;               shift and go to state 106
    error           shift and go to state 108
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 76
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 74

    (11) function -> FUN ID ( arglist ) localslist BEGIN error . END

    END             shift and go to state 109


state 75

    (9) function -> FUN ID ( arglist ) localslist error statementBlock . END
    (36) statementBlock -> statementBlock . ; statement
    (38) statementBlock -> statementBlock . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 110
    ;               shift and go to state 77
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 76
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 76

    (38) statementBlock -> statementBlock statement .

    END             reduce using rule 38 (statementBlock -> statementBlock statement .)
    ;               reduce using rule 38 (statementBlock -> statementBlock statement .)
    WHILE           reduce using rule 38 (statementBlock -> statementBlock statement .)
    RETURN          reduce using rule 38 (statementBlock -> statementBlock statement .)
    SKIP            reduce using rule 38 (statementBlock -> statementBlock statement .)
    BREAK           reduce using rule 38 (statementBlock -> statementBlock statement .)
    BEGIN           reduce using rule 38 (statementBlock -> statementBlock statement .)
    IF              reduce using rule 38 (statementBlock -> statementBlock statement .)
    ID              reduce using rule 38 (statementBlock -> statementBlock statement .)
    PRINT           reduce using rule 38 (statementBlock -> statementBlock statement .)
    WRITE           reduce using rule 38 (statementBlock -> statementBlock statement .)
    READ            reduce using rule 38 (statementBlock -> statementBlock statement .)
    error           reduce using rule 38 (statementBlock -> statementBlock statement .)


state 77

    (36) statementBlock -> statementBlock ; . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 111
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 78

    (7) function -> FUN error ( arglist ) localslist BEGIN statementBlock END .

    ;               reduce using rule 7 (function -> FUN error ( arglist ) localslist BEGIN statementBlock END .)
    ID              reduce using rule 7 (function -> FUN error ( arglist ) localslist BEGIN statementBlock END .)
    FUN             reduce using rule 7 (function -> FUN error ( arglist ) localslist BEGIN statementBlock END .)
    BEGIN           reduce using rule 7 (function -> FUN error ( arglist ) localslist BEGIN statementBlock END .)
    error           reduce using rule 7 (function -> FUN error ( arglist ) localslist BEGIN statementBlock END .)
    $end            reduce using rule 7 (function -> FUN error ( arglist ) localslist BEGIN statementBlock END .)


state 79

    (88) casting -> FLOAT . ( expression )

    (               shift and go to state 112


state 80

    (81) expression -> ( . expression )
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 113
    number                         shift and go to state 83

state 81

    (80) expression -> + . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 114
    number                         shift and go to state 83

state 82

    (79) expression -> - . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 115
    number                         shift and go to state 83

state 83

    (83) expression -> number .

    )               reduce using rule 83 (expression -> number .)
    LT              reduce using rule 83 (expression -> number .)
    LE              reduce using rule 83 (expression -> number .)
    GT              reduce using rule 83 (expression -> number .)
    GE              reduce using rule 83 (expression -> number .)
    NE              reduce using rule 83 (expression -> number .)
    EQUAL           reduce using rule 83 (expression -> number .)
    +               reduce using rule 83 (expression -> number .)
    -               reduce using rule 83 (expression -> number .)
    *               reduce using rule 83 (expression -> number .)
    /               reduce using rule 83 (expression -> number .)
    END             reduce using rule 83 (expression -> number .)
    ;               reduce using rule 83 (expression -> number .)
    WHILE           reduce using rule 83 (expression -> number .)
    RETURN          reduce using rule 83 (expression -> number .)
    SKIP            reduce using rule 83 (expression -> number .)
    BREAK           reduce using rule 83 (expression -> number .)
    BEGIN           reduce using rule 83 (expression -> number .)
    IF              reduce using rule 83 (expression -> number .)
    ID              reduce using rule 83 (expression -> number .)
    PRINT           reduce using rule 83 (expression -> number .)
    WRITE           reduce using rule 83 (expression -> number .)
    READ            reduce using rule 83 (expression -> number .)
    error           reduce using rule 83 (expression -> number .)
    ELSE            reduce using rule 83 (expression -> number .)
    ,               reduce using rule 83 (expression -> number .)
    ]               reduce using rule 83 (expression -> number .)
    DO              reduce using rule 83 (expression -> number .)
    OR              reduce using rule 83 (expression -> number .)
    AND             reduce using rule 83 (expression -> number .)
    THEN            reduce using rule 83 (expression -> number .)


state 84

    (87) casting -> INT . ( expression )

    (               shift and go to state 116


state 85

    (86) expression -> functionCall .

    )               reduce using rule 86 (expression -> functionCall .)
    LT              reduce using rule 86 (expression -> functionCall .)
    LE              reduce using rule 86 (expression -> functionCall .)
    GT              reduce using rule 86 (expression -> functionCall .)
    GE              reduce using rule 86 (expression -> functionCall .)
    NE              reduce using rule 86 (expression -> functionCall .)
    EQUAL           reduce using rule 86 (expression -> functionCall .)
    +               reduce using rule 86 (expression -> functionCall .)
    -               reduce using rule 86 (expression -> functionCall .)
    *               reduce using rule 86 (expression -> functionCall .)
    /               reduce using rule 86 (expression -> functionCall .)
    END             reduce using rule 86 (expression -> functionCall .)
    ;               reduce using rule 86 (expression -> functionCall .)
    WHILE           reduce using rule 86 (expression -> functionCall .)
    RETURN          reduce using rule 86 (expression -> functionCall .)
    SKIP            reduce using rule 86 (expression -> functionCall .)
    BREAK           reduce using rule 86 (expression -> functionCall .)
    BEGIN           reduce using rule 86 (expression -> functionCall .)
    IF              reduce using rule 86 (expression -> functionCall .)
    ID              reduce using rule 86 (expression -> functionCall .)
    PRINT           reduce using rule 86 (expression -> functionCall .)
    WRITE           reduce using rule 86 (expression -> functionCall .)
    READ            reduce using rule 86 (expression -> functionCall .)
    error           reduce using rule 86 (expression -> functionCall .)
    ELSE            reduce using rule 86 (expression -> functionCall .)
    ,               reduce using rule 86 (expression -> functionCall .)
    ]               reduce using rule 86 (expression -> functionCall .)
    DO              reduce using rule 86 (expression -> functionCall .)
    OR              reduce using rule 86 (expression -> functionCall .)
    AND             reduce using rule 86 (expression -> functionCall .)
    THEN            reduce using rule 86 (expression -> functionCall .)


state 86

    (90) number -> FLOATNUM .

    +               reduce using rule 90 (number -> FLOATNUM .)
    -               reduce using rule 90 (number -> FLOATNUM .)
    *               reduce using rule 90 (number -> FLOATNUM .)
    /               reduce using rule 90 (number -> FLOATNUM .)
    END             reduce using rule 90 (number -> FLOATNUM .)
    ;               reduce using rule 90 (number -> FLOATNUM .)
    WHILE           reduce using rule 90 (number -> FLOATNUM .)
    RETURN          reduce using rule 90 (number -> FLOATNUM .)
    SKIP            reduce using rule 90 (number -> FLOATNUM .)
    BREAK           reduce using rule 90 (number -> FLOATNUM .)
    BEGIN           reduce using rule 90 (number -> FLOATNUM .)
    IF              reduce using rule 90 (number -> FLOATNUM .)
    ID              reduce using rule 90 (number -> FLOATNUM .)
    PRINT           reduce using rule 90 (number -> FLOATNUM .)
    WRITE           reduce using rule 90 (number -> FLOATNUM .)
    READ            reduce using rule 90 (number -> FLOATNUM .)
    error           reduce using rule 90 (number -> FLOATNUM .)
    ELSE            reduce using rule 90 (number -> FLOATNUM .)
    LT              reduce using rule 90 (number -> FLOATNUM .)
    LE              reduce using rule 90 (number -> FLOATNUM .)
    GT              reduce using rule 90 (number -> FLOATNUM .)
    GE              reduce using rule 90 (number -> FLOATNUM .)
    NE              reduce using rule 90 (number -> FLOATNUM .)
    EQUAL           reduce using rule 90 (number -> FLOATNUM .)
    )               reduce using rule 90 (number -> FLOATNUM .)
    ,               reduce using rule 90 (number -> FLOATNUM .)
    ]               reduce using rule 90 (number -> FLOATNUM .)
    DO              reduce using rule 90 (number -> FLOATNUM .)
    OR              reduce using rule 90 (number -> FLOATNUM .)
    AND             reduce using rule 90 (number -> FLOATNUM .)
    THEN            reduce using rule 90 (number -> FLOATNUM .)


state 87

    (89) number -> INTEGER .

    +               reduce using rule 89 (number -> INTEGER .)
    -               reduce using rule 89 (number -> INTEGER .)
    *               reduce using rule 89 (number -> INTEGER .)
    /               reduce using rule 89 (number -> INTEGER .)
    END             reduce using rule 89 (number -> INTEGER .)
    ;               reduce using rule 89 (number -> INTEGER .)
    WHILE           reduce using rule 89 (number -> INTEGER .)
    RETURN          reduce using rule 89 (number -> INTEGER .)
    SKIP            reduce using rule 89 (number -> INTEGER .)
    BREAK           reduce using rule 89 (number -> INTEGER .)
    BEGIN           reduce using rule 89 (number -> INTEGER .)
    IF              reduce using rule 89 (number -> INTEGER .)
    ID              reduce using rule 89 (number -> INTEGER .)
    PRINT           reduce using rule 89 (number -> INTEGER .)
    WRITE           reduce using rule 89 (number -> INTEGER .)
    READ            reduce using rule 89 (number -> INTEGER .)
    error           reduce using rule 89 (number -> INTEGER .)
    ELSE            reduce using rule 89 (number -> INTEGER .)
    LT              reduce using rule 89 (number -> INTEGER .)
    LE              reduce using rule 89 (number -> INTEGER .)
    GT              reduce using rule 89 (number -> INTEGER .)
    GE              reduce using rule 89 (number -> INTEGER .)
    NE              reduce using rule 89 (number -> INTEGER .)
    EQUAL           reduce using rule 89 (number -> INTEGER .)
    )               reduce using rule 89 (number -> INTEGER .)
    ,               reduce using rule 89 (number -> INTEGER .)
    ]               reduce using rule 89 (number -> INTEGER .)
    DO              reduce using rule 89 (number -> INTEGER .)
    OR              reduce using rule 89 (number -> INTEGER .)
    AND             reduce using rule 89 (number -> INTEGER .)
    THEN            reduce using rule 89 (number -> INTEGER .)


state 88

    (85) expression -> casting .

    )               reduce using rule 85 (expression -> casting .)
    LT              reduce using rule 85 (expression -> casting .)
    LE              reduce using rule 85 (expression -> casting .)
    GT              reduce using rule 85 (expression -> casting .)
    GE              reduce using rule 85 (expression -> casting .)
    NE              reduce using rule 85 (expression -> casting .)
    EQUAL           reduce using rule 85 (expression -> casting .)
    +               reduce using rule 85 (expression -> casting .)
    -               reduce using rule 85 (expression -> casting .)
    *               reduce using rule 85 (expression -> casting .)
    /               reduce using rule 85 (expression -> casting .)
    END             reduce using rule 85 (expression -> casting .)
    ;               reduce using rule 85 (expression -> casting .)
    WHILE           reduce using rule 85 (expression -> casting .)
    RETURN          reduce using rule 85 (expression -> casting .)
    SKIP            reduce using rule 85 (expression -> casting .)
    BREAK           reduce using rule 85 (expression -> casting .)
    BEGIN           reduce using rule 85 (expression -> casting .)
    IF              reduce using rule 85 (expression -> casting .)
    ID              reduce using rule 85 (expression -> casting .)
    PRINT           reduce using rule 85 (expression -> casting .)
    WRITE           reduce using rule 85 (expression -> casting .)
    READ            reduce using rule 85 (expression -> casting .)
    error           reduce using rule 85 (expression -> casting .)
    ELSE            reduce using rule 85 (expression -> casting .)
    ,               reduce using rule 85 (expression -> casting .)
    ]               reduce using rule 85 (expression -> casting .)
    DO              reduce using rule 85 (expression -> casting .)
    OR              reduce using rule 85 (expression -> casting .)
    AND             reduce using rule 85 (expression -> casting .)
    THEN            reduce using rule 85 (expression -> casting .)


state 89

    (44) statement -> RETURN expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    END             reduce using rule 44 (statement -> RETURN expression .)
    ;               reduce using rule 44 (statement -> RETURN expression .)
    WHILE           reduce using rule 44 (statement -> RETURN expression .)
    RETURN          reduce using rule 44 (statement -> RETURN expression .)
    SKIP            reduce using rule 44 (statement -> RETURN expression .)
    BREAK           reduce using rule 44 (statement -> RETURN expression .)
    BEGIN           reduce using rule 44 (statement -> RETURN expression .)
    IF              reduce using rule 44 (statement -> RETURN expression .)
    ID              reduce using rule 44 (statement -> RETURN expression .)
    PRINT           reduce using rule 44 (statement -> RETURN expression .)
    WRITE           reduce using rule 44 (statement -> RETURN expression .)
    READ            reduce using rule 44 (statement -> RETURN expression .)
    error           reduce using rule 44 (statement -> RETURN expression .)
    ELSE            reduce using rule 44 (statement -> RETURN expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 90

    (82) expression -> ID .
    (84) expression -> ID . [ expression ]
    (55) functionCall -> ID . ( paramslistop )

    )               reduce using rule 82 (expression -> ID .)
    LT              reduce using rule 82 (expression -> ID .)
    LE              reduce using rule 82 (expression -> ID .)
    GT              reduce using rule 82 (expression -> ID .)
    GE              reduce using rule 82 (expression -> ID .)
    NE              reduce using rule 82 (expression -> ID .)
    EQUAL           reduce using rule 82 (expression -> ID .)
    +               reduce using rule 82 (expression -> ID .)
    -               reduce using rule 82 (expression -> ID .)
    *               reduce using rule 82 (expression -> ID .)
    /               reduce using rule 82 (expression -> ID .)
    END             reduce using rule 82 (expression -> ID .)
    ;               reduce using rule 82 (expression -> ID .)
    WHILE           reduce using rule 82 (expression -> ID .)
    RETURN          reduce using rule 82 (expression -> ID .)
    SKIP            reduce using rule 82 (expression -> ID .)
    BREAK           reduce using rule 82 (expression -> ID .)
    BEGIN           reduce using rule 82 (expression -> ID .)
    IF              reduce using rule 82 (expression -> ID .)
    ID              reduce using rule 82 (expression -> ID .)
    PRINT           reduce using rule 82 (expression -> ID .)
    WRITE           reduce using rule 82 (expression -> ID .)
    READ            reduce using rule 82 (expression -> ID .)
    error           reduce using rule 82 (expression -> ID .)
    ELSE            reduce using rule 82 (expression -> ID .)
    ,               reduce using rule 82 (expression -> ID .)
    ]               reduce using rule 82 (expression -> ID .)
    DO              reduce using rule 82 (expression -> ID .)
    OR              reduce using rule 82 (expression -> ID .)
    AND             reduce using rule 82 (expression -> ID .)
    THEN            reduce using rule 82 (expression -> ID .)
    [               shift and go to state 121
    (               shift and go to state 102


state 91

    (45) statement -> RETURN empty .

    END             reduce using rule 45 (statement -> RETURN empty .)
    ;               reduce using rule 45 (statement -> RETURN empty .)
    WHILE           reduce using rule 45 (statement -> RETURN empty .)
    RETURN          reduce using rule 45 (statement -> RETURN empty .)
    SKIP            reduce using rule 45 (statement -> RETURN empty .)
    BREAK           reduce using rule 45 (statement -> RETURN empty .)
    BEGIN           reduce using rule 45 (statement -> RETURN empty .)
    IF              reduce using rule 45 (statement -> RETURN empty .)
    ID              reduce using rule 45 (statement -> RETURN empty .)
    PRINT           reduce using rule 45 (statement -> RETURN empty .)
    WRITE           reduce using rule 45 (statement -> RETURN empty .)
    READ            reduce using rule 45 (statement -> RETURN empty .)
    error           reduce using rule 45 (statement -> RETURN empty .)
    ELSE            reduce using rule 45 (statement -> RETURN empty .)


state 92

    (62) inOutExpr -> READ ( . location )
    (63) location -> . ID
    (64) location -> . ID [ expression ]

    ID              shift and go to state 123

    location                       shift and go to state 122

state 93

    (60) inOutExpr -> PRINT ( . STRING )

    STRING          shift and go to state 124


state 94

    (39) statement -> WHILE relation . DO statement
    (65) relation -> relation . OR relation
    (66) relation -> relation . AND relation

    DO              shift and go to state 126
    OR              shift and go to state 127
    AND             shift and go to state 125


state 95

    (68) relation -> ( . relation )
    (81) expression -> ( . expression )
    (65) relation -> . relation OR relation
    (66) relation -> . relation AND relation
    (67) relation -> . NOT relation
    (68) relation -> . ( relation )
    (69) relation -> . expression LT expression
    (70) relation -> . expression LE expression
    (71) relation -> . expression GT expression
    (72) relation -> . expression GE expression
    (73) relation -> . expression NE expression
    (74) relation -> . expression EQUAL expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 96
    (               shift and go to state 95
    -               shift and go to state 82
    +               shift and go to state 81
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    relation                       shift and go to state 128
    functionCall                   shift and go to state 85
    expression                     shift and go to state 129

state 96

    (67) relation -> NOT . relation
    (65) relation -> . relation OR relation
    (66) relation -> . relation AND relation
    (67) relation -> . NOT relation
    (68) relation -> . ( relation )
    (69) relation -> . expression LT expression
    (70) relation -> . expression LE expression
    (71) relation -> . expression GT expression
    (72) relation -> . expression GE expression
    (73) relation -> . expression NE expression
    (74) relation -> . expression EQUAL expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 96
    (               shift and go to state 95
    -               shift and go to state 82
    +               shift and go to state 81
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    relation                       shift and go to state 130
    functionCall                   shift and go to state 85
    expression                     shift and go to state 97

state 97

    (69) relation -> expression . LT expression
    (70) relation -> expression . LE expression
    (71) relation -> expression . GT expression
    (72) relation -> expression . GE expression
    (73) relation -> expression . NE expression
    (74) relation -> expression . EQUAL expression
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    LT              shift and go to state 135
    LE              shift and go to state 131
    GT              shift and go to state 136
    GE              shift and go to state 133
    NE              shift and go to state 134
    EQUAL           shift and go to state 132
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 98

    (49) statement -> BEGIN statementBlock . END
    (36) statementBlock -> statementBlock . ; statement
    (38) statementBlock -> statementBlock . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 137
    ;               shift and go to state 77
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 76
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 99

    (50) statement -> BEGIN END .

    END             reduce using rule 50 (statement -> BEGIN END .)
    ;               reduce using rule 50 (statement -> BEGIN END .)
    WHILE           reduce using rule 50 (statement -> BEGIN END .)
    RETURN          reduce using rule 50 (statement -> BEGIN END .)
    SKIP            reduce using rule 50 (statement -> BEGIN END .)
    BREAK           reduce using rule 50 (statement -> BEGIN END .)
    BEGIN           reduce using rule 50 (statement -> BEGIN END .)
    IF              reduce using rule 50 (statement -> BEGIN END .)
    ID              reduce using rule 50 (statement -> BEGIN END .)
    PRINT           reduce using rule 50 (statement -> BEGIN END .)
    WRITE           reduce using rule 50 (statement -> BEGIN END .)
    READ            reduce using rule 50 (statement -> BEGIN END .)
    error           reduce using rule 50 (statement -> BEGIN END .)
    ELSE            reduce using rule 50 (statement -> BEGIN END .)


state 100

    (42) statement -> location ASIGN . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    functionCall                   shift and go to state 85
    expression                     shift and go to state 138

state 101

    (61) inOutExpr -> WRITE ( . expression )
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 139
    number                         shift and go to state 83

state 102

    (55) functionCall -> ID ( . paramslistop )
    (56) paramslistop -> . paramList
    (57) paramslistop -> . empty
    (58) paramList -> . paramList , expression
    (59) paramList -> . expression
    (91) empty -> .
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    )               reduce using rule 91 (empty -> .)
    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    paramslistop                   shift and go to state 140
    number                         shift and go to state 83
    functionCall                   shift and go to state 85
    paramList                      shift and go to state 141
    expression                     shift and go to state 142
    empty                          shift and go to state 143

state 103

    (64) location -> ID [ . expression ]
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 144
    number                         shift and go to state 83

state 104

    (51) ifthen -> IF relation . THEN statement
    (53) ifthen -> IF relation . statement
    (52) ifthenelse -> IF relation . THEN statement ELSE statement
    (54) ifthenelse -> IF relation . statement ELSE statement
    (65) relation -> relation . OR relation
    (66) relation -> relation . AND relation
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    THEN            shift and go to state 145
    OR              shift and go to state 127
    AND             shift and go to state 125
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 146
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 105

    (6) function -> FUN ID ( error ) localslist BEGIN statementBlock END .

    ;               reduce using rule 6 (function -> FUN ID ( error ) localslist BEGIN statementBlock END .)
    ID              reduce using rule 6 (function -> FUN ID ( error ) localslist BEGIN statementBlock END .)
    FUN             reduce using rule 6 (function -> FUN ID ( error ) localslist BEGIN statementBlock END .)
    BEGIN           reduce using rule 6 (function -> FUN ID ( error ) localslist BEGIN statementBlock END .)
    error           reduce using rule 6 (function -> FUN ID ( error ) localslist BEGIN statementBlock END .)
    $end            reduce using rule 6 (function -> FUN ID ( error ) localslist BEGIN statementBlock END .)


state 106

    (8) function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; . END
    (36) statementBlock -> statementBlock ; . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    END             shift and go to state 147
    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 111
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 107

    (5) function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .

    ;               reduce using rule 5 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .)
    ID              reduce using rule 5 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .)
    FUN             reduce using rule 5 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .)
    BEGIN           reduce using rule 5 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .)
    error           reduce using rule 5 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .)
    $end            reduce using rule 5 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock END .)


state 108

    (10) function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .

    ;               reduce using rule 10 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .)
    ID              reduce using rule 10 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .)
    FUN             reduce using rule 10 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .)
    BEGIN           reduce using rule 10 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .)
    error           reduce using rule 10 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .)
    $end            reduce using rule 10 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock error .)


state 109

    (11) function -> FUN ID ( arglist ) localslist BEGIN error END .

    ;               reduce using rule 11 (function -> FUN ID ( arglist ) localslist BEGIN error END .)
    ID              reduce using rule 11 (function -> FUN ID ( arglist ) localslist BEGIN error END .)
    FUN             reduce using rule 11 (function -> FUN ID ( arglist ) localslist BEGIN error END .)
    BEGIN           reduce using rule 11 (function -> FUN ID ( arglist ) localslist BEGIN error END .)
    error           reduce using rule 11 (function -> FUN ID ( arglist ) localslist BEGIN error END .)
    $end            reduce using rule 11 (function -> FUN ID ( arglist ) localslist BEGIN error END .)


state 110

    (9) function -> FUN ID ( arglist ) localslist error statementBlock END .

    ;               reduce using rule 9 (function -> FUN ID ( arglist ) localslist error statementBlock END .)
    ID              reduce using rule 9 (function -> FUN ID ( arglist ) localslist error statementBlock END .)
    FUN             reduce using rule 9 (function -> FUN ID ( arglist ) localslist error statementBlock END .)
    BEGIN           reduce using rule 9 (function -> FUN ID ( arglist ) localslist error statementBlock END .)
    error           reduce using rule 9 (function -> FUN ID ( arglist ) localslist error statementBlock END .)
    $end            reduce using rule 9 (function -> FUN ID ( arglist ) localslist error statementBlock END .)


state 111

    (36) statementBlock -> statementBlock ; statement .

    END             reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    ;               reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    WHILE           reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    RETURN          reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    SKIP            reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    BREAK           reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    BEGIN           reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    IF              reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    ID              reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    PRINT           reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    WRITE           reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    READ            reduce using rule 36 (statementBlock -> statementBlock ; statement .)
    error           reduce using rule 36 (statementBlock -> statementBlock ; statement .)


state 112

    (88) casting -> FLOAT ( . expression )
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 148
    number                         shift and go to state 83

state 113

    (81) expression -> ( expression . )
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               shift and go to state 149
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 114

    (80) expression -> + expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               reduce using rule 80 (expression -> + expression .)
    LT              reduce using rule 80 (expression -> + expression .)
    LE              reduce using rule 80 (expression -> + expression .)
    GT              reduce using rule 80 (expression -> + expression .)
    GE              reduce using rule 80 (expression -> + expression .)
    NE              reduce using rule 80 (expression -> + expression .)
    EQUAL           reduce using rule 80 (expression -> + expression .)
    +               reduce using rule 80 (expression -> + expression .)
    -               reduce using rule 80 (expression -> + expression .)
    *               reduce using rule 80 (expression -> + expression .)
    /               reduce using rule 80 (expression -> + expression .)
    END             reduce using rule 80 (expression -> + expression .)
    ;               reduce using rule 80 (expression -> + expression .)
    WHILE           reduce using rule 80 (expression -> + expression .)
    RETURN          reduce using rule 80 (expression -> + expression .)
    SKIP            reduce using rule 80 (expression -> + expression .)
    BREAK           reduce using rule 80 (expression -> + expression .)
    BEGIN           reduce using rule 80 (expression -> + expression .)
    IF              reduce using rule 80 (expression -> + expression .)
    ID              reduce using rule 80 (expression -> + expression .)
    PRINT           reduce using rule 80 (expression -> + expression .)
    WRITE           reduce using rule 80 (expression -> + expression .)
    READ            reduce using rule 80 (expression -> + expression .)
    error           reduce using rule 80 (expression -> + expression .)
    ELSE            reduce using rule 80 (expression -> + expression .)
    ,               reduce using rule 80 (expression -> + expression .)
    ]               reduce using rule 80 (expression -> + expression .)
    DO              reduce using rule 80 (expression -> + expression .)
    OR              reduce using rule 80 (expression -> + expression .)
    AND             reduce using rule 80 (expression -> + expression .)
    THEN            reduce using rule 80 (expression -> + expression .)

  ! +               [ shift and go to state 117 ]
  ! -               [ shift and go to state 119 ]
  ! *               [ shift and go to state 118 ]
  ! /               [ shift and go to state 120 ]


state 115

    (79) expression -> - expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               reduce using rule 79 (expression -> - expression .)
    LT              reduce using rule 79 (expression -> - expression .)
    LE              reduce using rule 79 (expression -> - expression .)
    GT              reduce using rule 79 (expression -> - expression .)
    GE              reduce using rule 79 (expression -> - expression .)
    NE              reduce using rule 79 (expression -> - expression .)
    EQUAL           reduce using rule 79 (expression -> - expression .)
    +               reduce using rule 79 (expression -> - expression .)
    -               reduce using rule 79 (expression -> - expression .)
    *               reduce using rule 79 (expression -> - expression .)
    /               reduce using rule 79 (expression -> - expression .)
    END             reduce using rule 79 (expression -> - expression .)
    ;               reduce using rule 79 (expression -> - expression .)
    WHILE           reduce using rule 79 (expression -> - expression .)
    RETURN          reduce using rule 79 (expression -> - expression .)
    SKIP            reduce using rule 79 (expression -> - expression .)
    BREAK           reduce using rule 79 (expression -> - expression .)
    BEGIN           reduce using rule 79 (expression -> - expression .)
    IF              reduce using rule 79 (expression -> - expression .)
    ID              reduce using rule 79 (expression -> - expression .)
    PRINT           reduce using rule 79 (expression -> - expression .)
    WRITE           reduce using rule 79 (expression -> - expression .)
    READ            reduce using rule 79 (expression -> - expression .)
    error           reduce using rule 79 (expression -> - expression .)
    ELSE            reduce using rule 79 (expression -> - expression .)
    ,               reduce using rule 79 (expression -> - expression .)
    ]               reduce using rule 79 (expression -> - expression .)
    DO              reduce using rule 79 (expression -> - expression .)
    OR              reduce using rule 79 (expression -> - expression .)
    AND             reduce using rule 79 (expression -> - expression .)
    THEN            reduce using rule 79 (expression -> - expression .)

  ! +               [ shift and go to state 117 ]
  ! -               [ shift and go to state 119 ]
  ! *               [ shift and go to state 118 ]
  ! /               [ shift and go to state 120 ]


state 116

    (87) casting -> INT ( . expression )
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 150
    number                         shift and go to state 83

state 117

    (75) expression -> expression + . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 151
    number                         shift and go to state 83

state 118

    (77) expression -> expression * . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 152
    number                         shift and go to state 83

state 119

    (76) expression -> expression - . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 153
    number                         shift and go to state 83

state 120

    (78) expression -> expression / . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 154
    number                         shift and go to state 83

state 121

    (84) expression -> ID [ . expression ]
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 155
    number                         shift and go to state 83

state 122

    (62) inOutExpr -> READ ( location . )

    )               shift and go to state 156


state 123

    (63) location -> ID .
    (64) location -> ID . [ expression ]

    )               reduce using rule 63 (location -> ID .)
    [               shift and go to state 103


state 124

    (60) inOutExpr -> PRINT ( STRING . )

    )               shift and go to state 157


state 125

    (66) relation -> relation AND . relation
    (65) relation -> . relation OR relation
    (66) relation -> . relation AND relation
    (67) relation -> . NOT relation
    (68) relation -> . ( relation )
    (69) relation -> . expression LT expression
    (70) relation -> . expression LE expression
    (71) relation -> . expression GT expression
    (72) relation -> . expression GE expression
    (73) relation -> . expression NE expression
    (74) relation -> . expression EQUAL expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 96
    (               shift and go to state 95
    -               shift and go to state 82
    +               shift and go to state 81
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    relation                       shift and go to state 158
    functionCall                   shift and go to state 85
    expression                     shift and go to state 97

state 126

    (39) statement -> WHILE relation DO . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 159
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 127

    (65) relation -> relation OR . relation
    (65) relation -> . relation OR relation
    (66) relation -> . relation AND relation
    (67) relation -> . NOT relation
    (68) relation -> . ( relation )
    (69) relation -> . expression LT expression
    (70) relation -> . expression LE expression
    (71) relation -> . expression GT expression
    (72) relation -> . expression GE expression
    (73) relation -> . expression NE expression
    (74) relation -> . expression EQUAL expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 96
    (               shift and go to state 95
    -               shift and go to state 82
    +               shift and go to state 81
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    relation                       shift and go to state 160
    functionCall                   shift and go to state 85
    expression                     shift and go to state 97

state 128

    (68) relation -> ( relation . )
    (65) relation -> relation . OR relation
    (66) relation -> relation . AND relation

    )               shift and go to state 161
    OR              shift and go to state 127
    AND             shift and go to state 125


state 129

    (81) expression -> ( expression . )
    (69) relation -> expression . LT expression
    (70) relation -> expression . LE expression
    (71) relation -> expression . GT expression
    (72) relation -> expression . GE expression
    (73) relation -> expression . NE expression
    (74) relation -> expression . EQUAL expression
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               shift and go to state 149
    LT              shift and go to state 135
    LE              shift and go to state 131
    GT              shift and go to state 136
    GE              shift and go to state 133
    NE              shift and go to state 134
    EQUAL           shift and go to state 132
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 130

    (67) relation -> NOT relation .
    (65) relation -> relation . OR relation
    (66) relation -> relation . AND relation

    OR              reduce using rule 67 (relation -> NOT relation .)
    AND             reduce using rule 67 (relation -> NOT relation .)
    DO              reduce using rule 67 (relation -> NOT relation .)
    THEN            reduce using rule 67 (relation -> NOT relation .)
    WHILE           reduce using rule 67 (relation -> NOT relation .)
    RETURN          reduce using rule 67 (relation -> NOT relation .)
    SKIP            reduce using rule 67 (relation -> NOT relation .)
    BREAK           reduce using rule 67 (relation -> NOT relation .)
    BEGIN           reduce using rule 67 (relation -> NOT relation .)
    IF              reduce using rule 67 (relation -> NOT relation .)
    ID              reduce using rule 67 (relation -> NOT relation .)
    PRINT           reduce using rule 67 (relation -> NOT relation .)
    WRITE           reduce using rule 67 (relation -> NOT relation .)
    READ            reduce using rule 67 (relation -> NOT relation .)
    )               reduce using rule 67 (relation -> NOT relation .)

  ! OR              [ shift and go to state 127 ]
  ! AND             [ shift and go to state 125 ]


state 131

    (70) relation -> expression LE . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 162
    number                         shift and go to state 83

state 132

    (74) relation -> expression EQUAL . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 163
    number                         shift and go to state 83

state 133

    (72) relation -> expression GE . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 164
    number                         shift and go to state 83

state 134

    (73) relation -> expression NE . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 165
    number                         shift and go to state 83

state 135

    (69) relation -> expression LT . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 166
    number                         shift and go to state 83

state 136

    (71) relation -> expression GT . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    functionCall                   shift and go to state 85
    casting                        shift and go to state 88
    expression                     shift and go to state 167
    number                         shift and go to state 83

state 137

    (49) statement -> BEGIN statementBlock END .

    END             reduce using rule 49 (statement -> BEGIN statementBlock END .)
    ;               reduce using rule 49 (statement -> BEGIN statementBlock END .)
    WHILE           reduce using rule 49 (statement -> BEGIN statementBlock END .)
    RETURN          reduce using rule 49 (statement -> BEGIN statementBlock END .)
    SKIP            reduce using rule 49 (statement -> BEGIN statementBlock END .)
    BREAK           reduce using rule 49 (statement -> BEGIN statementBlock END .)
    BEGIN           reduce using rule 49 (statement -> BEGIN statementBlock END .)
    IF              reduce using rule 49 (statement -> BEGIN statementBlock END .)
    ID              reduce using rule 49 (statement -> BEGIN statementBlock END .)
    PRINT           reduce using rule 49 (statement -> BEGIN statementBlock END .)
    WRITE           reduce using rule 49 (statement -> BEGIN statementBlock END .)
    READ            reduce using rule 49 (statement -> BEGIN statementBlock END .)
    error           reduce using rule 49 (statement -> BEGIN statementBlock END .)
    ELSE            reduce using rule 49 (statement -> BEGIN statementBlock END .)


state 138

    (42) statement -> location ASIGN expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    END             reduce using rule 42 (statement -> location ASIGN expression .)
    ;               reduce using rule 42 (statement -> location ASIGN expression .)
    WHILE           reduce using rule 42 (statement -> location ASIGN expression .)
    RETURN          reduce using rule 42 (statement -> location ASIGN expression .)
    SKIP            reduce using rule 42 (statement -> location ASIGN expression .)
    BREAK           reduce using rule 42 (statement -> location ASIGN expression .)
    BEGIN           reduce using rule 42 (statement -> location ASIGN expression .)
    IF              reduce using rule 42 (statement -> location ASIGN expression .)
    ID              reduce using rule 42 (statement -> location ASIGN expression .)
    PRINT           reduce using rule 42 (statement -> location ASIGN expression .)
    WRITE           reduce using rule 42 (statement -> location ASIGN expression .)
    READ            reduce using rule 42 (statement -> location ASIGN expression .)
    error           reduce using rule 42 (statement -> location ASIGN expression .)
    ELSE            reduce using rule 42 (statement -> location ASIGN expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 139

    (61) inOutExpr -> WRITE ( expression . )
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               shift and go to state 168
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 140

    (55) functionCall -> ID ( paramslistop . )

    )               shift and go to state 169


state 141

    (56) paramslistop -> paramList .
    (58) paramList -> paramList . , expression

    )               reduce using rule 56 (paramslistop -> paramList .)
    ,               shift and go to state 170


state 142

    (59) paramList -> expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    ,               reduce using rule 59 (paramList -> expression .)
    )               reduce using rule 59 (paramList -> expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 143

    (57) paramslistop -> empty .

    )               reduce using rule 57 (paramslistop -> empty .)


state 144

    (64) location -> ID [ expression . ]
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    ]               shift and go to state 171
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 145

    (51) ifthen -> IF relation THEN . statement
    (52) ifthenelse -> IF relation THEN . statement ELSE statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 172
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 146

    (53) ifthen -> IF relation statement .
    (54) ifthenelse -> IF relation statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 53 (ifthen -> IF relation statement .)
    ;               reduce using rule 53 (ifthen -> IF relation statement .)
    WHILE           reduce using rule 53 (ifthen -> IF relation statement .)
    RETURN          reduce using rule 53 (ifthen -> IF relation statement .)
    SKIP            reduce using rule 53 (ifthen -> IF relation statement .)
    BREAK           reduce using rule 53 (ifthen -> IF relation statement .)
    BEGIN           reduce using rule 53 (ifthen -> IF relation statement .)
    IF              reduce using rule 53 (ifthen -> IF relation statement .)
    ID              reduce using rule 53 (ifthen -> IF relation statement .)
    PRINT           reduce using rule 53 (ifthen -> IF relation statement .)
    WRITE           reduce using rule 53 (ifthen -> IF relation statement .)
    READ            reduce using rule 53 (ifthen -> IF relation statement .)
    error           reduce using rule 53 (ifthen -> IF relation statement .)
    ELSE            shift and go to state 173

  ! ELSE            [ reduce using rule 53 (ifthen -> IF relation statement .) ]


state 147

    (8) function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .

    ;               reduce using rule 8 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .)
    ID              reduce using rule 8 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .)
    FUN             reduce using rule 8 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .)
    BEGIN           reduce using rule 8 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .)
    error           reduce using rule 8 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .)
    $end            reduce using rule 8 (function -> FUN ID ( arglist ) localslist BEGIN statementBlock ; END .)


state 148

    (88) casting -> FLOAT ( expression . )
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               shift and go to state 174
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 149

    (81) expression -> ( expression ) .

    )               reduce using rule 81 (expression -> ( expression ) .)
    LT              reduce using rule 81 (expression -> ( expression ) .)
    LE              reduce using rule 81 (expression -> ( expression ) .)
    GT              reduce using rule 81 (expression -> ( expression ) .)
    GE              reduce using rule 81 (expression -> ( expression ) .)
    NE              reduce using rule 81 (expression -> ( expression ) .)
    EQUAL           reduce using rule 81 (expression -> ( expression ) .)
    +               reduce using rule 81 (expression -> ( expression ) .)
    -               reduce using rule 81 (expression -> ( expression ) .)
    *               reduce using rule 81 (expression -> ( expression ) .)
    /               reduce using rule 81 (expression -> ( expression ) .)
    END             reduce using rule 81 (expression -> ( expression ) .)
    ;               reduce using rule 81 (expression -> ( expression ) .)
    WHILE           reduce using rule 81 (expression -> ( expression ) .)
    RETURN          reduce using rule 81 (expression -> ( expression ) .)
    SKIP            reduce using rule 81 (expression -> ( expression ) .)
    BREAK           reduce using rule 81 (expression -> ( expression ) .)
    BEGIN           reduce using rule 81 (expression -> ( expression ) .)
    IF              reduce using rule 81 (expression -> ( expression ) .)
    ID              reduce using rule 81 (expression -> ( expression ) .)
    PRINT           reduce using rule 81 (expression -> ( expression ) .)
    WRITE           reduce using rule 81 (expression -> ( expression ) .)
    READ            reduce using rule 81 (expression -> ( expression ) .)
    error           reduce using rule 81 (expression -> ( expression ) .)
    ELSE            reduce using rule 81 (expression -> ( expression ) .)
    ,               reduce using rule 81 (expression -> ( expression ) .)
    ]               reduce using rule 81 (expression -> ( expression ) .)
    DO              reduce using rule 81 (expression -> ( expression ) .)
    OR              reduce using rule 81 (expression -> ( expression ) .)
    AND             reduce using rule 81 (expression -> ( expression ) .)
    THEN            reduce using rule 81 (expression -> ( expression ) .)


state 150

    (87) casting -> INT ( expression . )
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               shift and go to state 175
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 151

    (75) expression -> expression + expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               reduce using rule 75 (expression -> expression + expression .)
    LT              reduce using rule 75 (expression -> expression + expression .)
    LE              reduce using rule 75 (expression -> expression + expression .)
    GT              reduce using rule 75 (expression -> expression + expression .)
    GE              reduce using rule 75 (expression -> expression + expression .)
    NE              reduce using rule 75 (expression -> expression + expression .)
    EQUAL           reduce using rule 75 (expression -> expression + expression .)
    +               reduce using rule 75 (expression -> expression + expression .)
    -               reduce using rule 75 (expression -> expression + expression .)
    END             reduce using rule 75 (expression -> expression + expression .)
    ;               reduce using rule 75 (expression -> expression + expression .)
    WHILE           reduce using rule 75 (expression -> expression + expression .)
    RETURN          reduce using rule 75 (expression -> expression + expression .)
    SKIP            reduce using rule 75 (expression -> expression + expression .)
    BREAK           reduce using rule 75 (expression -> expression + expression .)
    BEGIN           reduce using rule 75 (expression -> expression + expression .)
    IF              reduce using rule 75 (expression -> expression + expression .)
    ID              reduce using rule 75 (expression -> expression + expression .)
    PRINT           reduce using rule 75 (expression -> expression + expression .)
    WRITE           reduce using rule 75 (expression -> expression + expression .)
    READ            reduce using rule 75 (expression -> expression + expression .)
    error           reduce using rule 75 (expression -> expression + expression .)
    ELSE            reduce using rule 75 (expression -> expression + expression .)
    ,               reduce using rule 75 (expression -> expression + expression .)
    ]               reduce using rule 75 (expression -> expression + expression .)
    DO              reduce using rule 75 (expression -> expression + expression .)
    OR              reduce using rule 75 (expression -> expression + expression .)
    AND             reduce using rule 75 (expression -> expression + expression .)
    THEN            reduce using rule 75 (expression -> expression + expression .)
    *               shift and go to state 118
    /               shift and go to state 120

  ! *               [ reduce using rule 75 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 75 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 117 ]
  ! -               [ shift and go to state 119 ]


state 152

    (77) expression -> expression * expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               reduce using rule 77 (expression -> expression * expression .)
    LT              reduce using rule 77 (expression -> expression * expression .)
    LE              reduce using rule 77 (expression -> expression * expression .)
    GT              reduce using rule 77 (expression -> expression * expression .)
    GE              reduce using rule 77 (expression -> expression * expression .)
    NE              reduce using rule 77 (expression -> expression * expression .)
    EQUAL           reduce using rule 77 (expression -> expression * expression .)
    +               reduce using rule 77 (expression -> expression * expression .)
    -               reduce using rule 77 (expression -> expression * expression .)
    *               reduce using rule 77 (expression -> expression * expression .)
    /               reduce using rule 77 (expression -> expression * expression .)
    END             reduce using rule 77 (expression -> expression * expression .)
    ;               reduce using rule 77 (expression -> expression * expression .)
    WHILE           reduce using rule 77 (expression -> expression * expression .)
    RETURN          reduce using rule 77 (expression -> expression * expression .)
    SKIP            reduce using rule 77 (expression -> expression * expression .)
    BREAK           reduce using rule 77 (expression -> expression * expression .)
    BEGIN           reduce using rule 77 (expression -> expression * expression .)
    IF              reduce using rule 77 (expression -> expression * expression .)
    ID              reduce using rule 77 (expression -> expression * expression .)
    PRINT           reduce using rule 77 (expression -> expression * expression .)
    WRITE           reduce using rule 77 (expression -> expression * expression .)
    READ            reduce using rule 77 (expression -> expression * expression .)
    error           reduce using rule 77 (expression -> expression * expression .)
    ELSE            reduce using rule 77 (expression -> expression * expression .)
    ,               reduce using rule 77 (expression -> expression * expression .)
    ]               reduce using rule 77 (expression -> expression * expression .)
    DO              reduce using rule 77 (expression -> expression * expression .)
    OR              reduce using rule 77 (expression -> expression * expression .)
    AND             reduce using rule 77 (expression -> expression * expression .)
    THEN            reduce using rule 77 (expression -> expression * expression .)

  ! +               [ shift and go to state 117 ]
  ! -               [ shift and go to state 119 ]
  ! *               [ shift and go to state 118 ]
  ! /               [ shift and go to state 120 ]


state 153

    (76) expression -> expression - expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               reduce using rule 76 (expression -> expression - expression .)
    LT              reduce using rule 76 (expression -> expression - expression .)
    LE              reduce using rule 76 (expression -> expression - expression .)
    GT              reduce using rule 76 (expression -> expression - expression .)
    GE              reduce using rule 76 (expression -> expression - expression .)
    NE              reduce using rule 76 (expression -> expression - expression .)
    EQUAL           reduce using rule 76 (expression -> expression - expression .)
    +               reduce using rule 76 (expression -> expression - expression .)
    -               reduce using rule 76 (expression -> expression - expression .)
    END             reduce using rule 76 (expression -> expression - expression .)
    ;               reduce using rule 76 (expression -> expression - expression .)
    WHILE           reduce using rule 76 (expression -> expression - expression .)
    RETURN          reduce using rule 76 (expression -> expression - expression .)
    SKIP            reduce using rule 76 (expression -> expression - expression .)
    BREAK           reduce using rule 76 (expression -> expression - expression .)
    BEGIN           reduce using rule 76 (expression -> expression - expression .)
    IF              reduce using rule 76 (expression -> expression - expression .)
    ID              reduce using rule 76 (expression -> expression - expression .)
    PRINT           reduce using rule 76 (expression -> expression - expression .)
    WRITE           reduce using rule 76 (expression -> expression - expression .)
    READ            reduce using rule 76 (expression -> expression - expression .)
    error           reduce using rule 76 (expression -> expression - expression .)
    ELSE            reduce using rule 76 (expression -> expression - expression .)
    ,               reduce using rule 76 (expression -> expression - expression .)
    ]               reduce using rule 76 (expression -> expression - expression .)
    DO              reduce using rule 76 (expression -> expression - expression .)
    OR              reduce using rule 76 (expression -> expression - expression .)
    AND             reduce using rule 76 (expression -> expression - expression .)
    THEN            reduce using rule 76 (expression -> expression - expression .)
    *               shift and go to state 118
    /               shift and go to state 120

  ! *               [ reduce using rule 76 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 76 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 117 ]
  ! -               [ shift and go to state 119 ]


state 154

    (78) expression -> expression / expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    )               reduce using rule 78 (expression -> expression / expression .)
    LT              reduce using rule 78 (expression -> expression / expression .)
    LE              reduce using rule 78 (expression -> expression / expression .)
    GT              reduce using rule 78 (expression -> expression / expression .)
    GE              reduce using rule 78 (expression -> expression / expression .)
    NE              reduce using rule 78 (expression -> expression / expression .)
    EQUAL           reduce using rule 78 (expression -> expression / expression .)
    +               reduce using rule 78 (expression -> expression / expression .)
    -               reduce using rule 78 (expression -> expression / expression .)
    *               reduce using rule 78 (expression -> expression / expression .)
    /               reduce using rule 78 (expression -> expression / expression .)
    END             reduce using rule 78 (expression -> expression / expression .)
    ;               reduce using rule 78 (expression -> expression / expression .)
    WHILE           reduce using rule 78 (expression -> expression / expression .)
    RETURN          reduce using rule 78 (expression -> expression / expression .)
    SKIP            reduce using rule 78 (expression -> expression / expression .)
    BREAK           reduce using rule 78 (expression -> expression / expression .)
    BEGIN           reduce using rule 78 (expression -> expression / expression .)
    IF              reduce using rule 78 (expression -> expression / expression .)
    ID              reduce using rule 78 (expression -> expression / expression .)
    PRINT           reduce using rule 78 (expression -> expression / expression .)
    WRITE           reduce using rule 78 (expression -> expression / expression .)
    READ            reduce using rule 78 (expression -> expression / expression .)
    error           reduce using rule 78 (expression -> expression / expression .)
    ELSE            reduce using rule 78 (expression -> expression / expression .)
    ,               reduce using rule 78 (expression -> expression / expression .)
    ]               reduce using rule 78 (expression -> expression / expression .)
    DO              reduce using rule 78 (expression -> expression / expression .)
    OR              reduce using rule 78 (expression -> expression / expression .)
    AND             reduce using rule 78 (expression -> expression / expression .)
    THEN            reduce using rule 78 (expression -> expression / expression .)

  ! +               [ shift and go to state 117 ]
  ! -               [ shift and go to state 119 ]
  ! *               [ shift and go to state 118 ]
  ! /               [ shift and go to state 120 ]


state 155

    (84) expression -> ID [ expression . ]
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    ]               shift and go to state 176
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 156

    (62) inOutExpr -> READ ( location ) .

    ELSE            reduce using rule 62 (inOutExpr -> READ ( location ) .)
    END             reduce using rule 62 (inOutExpr -> READ ( location ) .)
    ;               reduce using rule 62 (inOutExpr -> READ ( location ) .)
    WHILE           reduce using rule 62 (inOutExpr -> READ ( location ) .)
    RETURN          reduce using rule 62 (inOutExpr -> READ ( location ) .)
    SKIP            reduce using rule 62 (inOutExpr -> READ ( location ) .)
    BREAK           reduce using rule 62 (inOutExpr -> READ ( location ) .)
    BEGIN           reduce using rule 62 (inOutExpr -> READ ( location ) .)
    IF              reduce using rule 62 (inOutExpr -> READ ( location ) .)
    ID              reduce using rule 62 (inOutExpr -> READ ( location ) .)
    PRINT           reduce using rule 62 (inOutExpr -> READ ( location ) .)
    WRITE           reduce using rule 62 (inOutExpr -> READ ( location ) .)
    READ            reduce using rule 62 (inOutExpr -> READ ( location ) .)
    error           reduce using rule 62 (inOutExpr -> READ ( location ) .)


state 157

    (60) inOutExpr -> PRINT ( STRING ) .

    ELSE            reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    END             reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    ;               reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    WHILE           reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    RETURN          reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    SKIP            reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    BREAK           reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    BEGIN           reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    IF              reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    ID              reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    PRINT           reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    WRITE           reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    READ            reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)
    error           reduce using rule 60 (inOutExpr -> PRINT ( STRING ) .)


state 158

    (66) relation -> relation AND relation .
    (65) relation -> relation . OR relation
    (66) relation -> relation . AND relation

    OR              reduce using rule 66 (relation -> relation AND relation .)
    AND             reduce using rule 66 (relation -> relation AND relation .)
    DO              reduce using rule 66 (relation -> relation AND relation .)
    THEN            reduce using rule 66 (relation -> relation AND relation .)
    WHILE           reduce using rule 66 (relation -> relation AND relation .)
    RETURN          reduce using rule 66 (relation -> relation AND relation .)
    SKIP            reduce using rule 66 (relation -> relation AND relation .)
    BREAK           reduce using rule 66 (relation -> relation AND relation .)
    BEGIN           reduce using rule 66 (relation -> relation AND relation .)
    IF              reduce using rule 66 (relation -> relation AND relation .)
    ID              reduce using rule 66 (relation -> relation AND relation .)
    PRINT           reduce using rule 66 (relation -> relation AND relation .)
    WRITE           reduce using rule 66 (relation -> relation AND relation .)
    READ            reduce using rule 66 (relation -> relation AND relation .)
    )               reduce using rule 66 (relation -> relation AND relation .)

  ! OR              [ shift and go to state 127 ]
  ! AND             [ shift and go to state 125 ]


state 159

    (39) statement -> WHILE relation DO statement .

    END             reduce using rule 39 (statement -> WHILE relation DO statement .)
    ;               reduce using rule 39 (statement -> WHILE relation DO statement .)
    WHILE           reduce using rule 39 (statement -> WHILE relation DO statement .)
    RETURN          reduce using rule 39 (statement -> WHILE relation DO statement .)
    SKIP            reduce using rule 39 (statement -> WHILE relation DO statement .)
    BREAK           reduce using rule 39 (statement -> WHILE relation DO statement .)
    BEGIN           reduce using rule 39 (statement -> WHILE relation DO statement .)
    IF              reduce using rule 39 (statement -> WHILE relation DO statement .)
    ID              reduce using rule 39 (statement -> WHILE relation DO statement .)
    PRINT           reduce using rule 39 (statement -> WHILE relation DO statement .)
    WRITE           reduce using rule 39 (statement -> WHILE relation DO statement .)
    READ            reduce using rule 39 (statement -> WHILE relation DO statement .)
    error           reduce using rule 39 (statement -> WHILE relation DO statement .)
    ELSE            reduce using rule 39 (statement -> WHILE relation DO statement .)


state 160

    (65) relation -> relation OR relation .
    (65) relation -> relation . OR relation
    (66) relation -> relation . AND relation

    OR              reduce using rule 65 (relation -> relation OR relation .)
    DO              reduce using rule 65 (relation -> relation OR relation .)
    THEN            reduce using rule 65 (relation -> relation OR relation .)
    WHILE           reduce using rule 65 (relation -> relation OR relation .)
    RETURN          reduce using rule 65 (relation -> relation OR relation .)
    SKIP            reduce using rule 65 (relation -> relation OR relation .)
    BREAK           reduce using rule 65 (relation -> relation OR relation .)
    BEGIN           reduce using rule 65 (relation -> relation OR relation .)
    IF              reduce using rule 65 (relation -> relation OR relation .)
    ID              reduce using rule 65 (relation -> relation OR relation .)
    PRINT           reduce using rule 65 (relation -> relation OR relation .)
    WRITE           reduce using rule 65 (relation -> relation OR relation .)
    READ            reduce using rule 65 (relation -> relation OR relation .)
    )               reduce using rule 65 (relation -> relation OR relation .)
    AND             shift and go to state 125

  ! AND             [ reduce using rule 65 (relation -> relation OR relation .) ]
  ! OR              [ shift and go to state 127 ]


state 161

    (68) relation -> ( relation ) .

    OR              reduce using rule 68 (relation -> ( relation ) .)
    AND             reduce using rule 68 (relation -> ( relation ) .)
    DO              reduce using rule 68 (relation -> ( relation ) .)
    THEN            reduce using rule 68 (relation -> ( relation ) .)
    WHILE           reduce using rule 68 (relation -> ( relation ) .)
    RETURN          reduce using rule 68 (relation -> ( relation ) .)
    SKIP            reduce using rule 68 (relation -> ( relation ) .)
    BREAK           reduce using rule 68 (relation -> ( relation ) .)
    BEGIN           reduce using rule 68 (relation -> ( relation ) .)
    IF              reduce using rule 68 (relation -> ( relation ) .)
    ID              reduce using rule 68 (relation -> ( relation ) .)
    PRINT           reduce using rule 68 (relation -> ( relation ) .)
    WRITE           reduce using rule 68 (relation -> ( relation ) .)
    READ            reduce using rule 68 (relation -> ( relation ) .)
    )               reduce using rule 68 (relation -> ( relation ) .)


state 162

    (70) relation -> expression LE expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    OR              reduce using rule 70 (relation -> expression LE expression .)
    AND             reduce using rule 70 (relation -> expression LE expression .)
    DO              reduce using rule 70 (relation -> expression LE expression .)
    THEN            reduce using rule 70 (relation -> expression LE expression .)
    WHILE           reduce using rule 70 (relation -> expression LE expression .)
    RETURN          reduce using rule 70 (relation -> expression LE expression .)
    SKIP            reduce using rule 70 (relation -> expression LE expression .)
    BREAK           reduce using rule 70 (relation -> expression LE expression .)
    BEGIN           reduce using rule 70 (relation -> expression LE expression .)
    IF              reduce using rule 70 (relation -> expression LE expression .)
    ID              reduce using rule 70 (relation -> expression LE expression .)
    PRINT           reduce using rule 70 (relation -> expression LE expression .)
    WRITE           reduce using rule 70 (relation -> expression LE expression .)
    READ            reduce using rule 70 (relation -> expression LE expression .)
    )               reduce using rule 70 (relation -> expression LE expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 163

    (74) relation -> expression EQUAL expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    OR              reduce using rule 74 (relation -> expression EQUAL expression .)
    AND             reduce using rule 74 (relation -> expression EQUAL expression .)
    DO              reduce using rule 74 (relation -> expression EQUAL expression .)
    THEN            reduce using rule 74 (relation -> expression EQUAL expression .)
    WHILE           reduce using rule 74 (relation -> expression EQUAL expression .)
    RETURN          reduce using rule 74 (relation -> expression EQUAL expression .)
    SKIP            reduce using rule 74 (relation -> expression EQUAL expression .)
    BREAK           reduce using rule 74 (relation -> expression EQUAL expression .)
    BEGIN           reduce using rule 74 (relation -> expression EQUAL expression .)
    IF              reduce using rule 74 (relation -> expression EQUAL expression .)
    ID              reduce using rule 74 (relation -> expression EQUAL expression .)
    PRINT           reduce using rule 74 (relation -> expression EQUAL expression .)
    WRITE           reduce using rule 74 (relation -> expression EQUAL expression .)
    READ            reduce using rule 74 (relation -> expression EQUAL expression .)
    )               reduce using rule 74 (relation -> expression EQUAL expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 164

    (72) relation -> expression GE expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    OR              reduce using rule 72 (relation -> expression GE expression .)
    AND             reduce using rule 72 (relation -> expression GE expression .)
    DO              reduce using rule 72 (relation -> expression GE expression .)
    THEN            reduce using rule 72 (relation -> expression GE expression .)
    WHILE           reduce using rule 72 (relation -> expression GE expression .)
    RETURN          reduce using rule 72 (relation -> expression GE expression .)
    SKIP            reduce using rule 72 (relation -> expression GE expression .)
    BREAK           reduce using rule 72 (relation -> expression GE expression .)
    BEGIN           reduce using rule 72 (relation -> expression GE expression .)
    IF              reduce using rule 72 (relation -> expression GE expression .)
    ID              reduce using rule 72 (relation -> expression GE expression .)
    PRINT           reduce using rule 72 (relation -> expression GE expression .)
    WRITE           reduce using rule 72 (relation -> expression GE expression .)
    READ            reduce using rule 72 (relation -> expression GE expression .)
    )               reduce using rule 72 (relation -> expression GE expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 165

    (73) relation -> expression NE expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    OR              reduce using rule 73 (relation -> expression NE expression .)
    AND             reduce using rule 73 (relation -> expression NE expression .)
    DO              reduce using rule 73 (relation -> expression NE expression .)
    THEN            reduce using rule 73 (relation -> expression NE expression .)
    WHILE           reduce using rule 73 (relation -> expression NE expression .)
    RETURN          reduce using rule 73 (relation -> expression NE expression .)
    SKIP            reduce using rule 73 (relation -> expression NE expression .)
    BREAK           reduce using rule 73 (relation -> expression NE expression .)
    BEGIN           reduce using rule 73 (relation -> expression NE expression .)
    IF              reduce using rule 73 (relation -> expression NE expression .)
    ID              reduce using rule 73 (relation -> expression NE expression .)
    PRINT           reduce using rule 73 (relation -> expression NE expression .)
    WRITE           reduce using rule 73 (relation -> expression NE expression .)
    READ            reduce using rule 73 (relation -> expression NE expression .)
    )               reduce using rule 73 (relation -> expression NE expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 166

    (69) relation -> expression LT expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    OR              reduce using rule 69 (relation -> expression LT expression .)
    AND             reduce using rule 69 (relation -> expression LT expression .)
    DO              reduce using rule 69 (relation -> expression LT expression .)
    THEN            reduce using rule 69 (relation -> expression LT expression .)
    WHILE           reduce using rule 69 (relation -> expression LT expression .)
    RETURN          reduce using rule 69 (relation -> expression LT expression .)
    SKIP            reduce using rule 69 (relation -> expression LT expression .)
    BREAK           reduce using rule 69 (relation -> expression LT expression .)
    BEGIN           reduce using rule 69 (relation -> expression LT expression .)
    IF              reduce using rule 69 (relation -> expression LT expression .)
    ID              reduce using rule 69 (relation -> expression LT expression .)
    PRINT           reduce using rule 69 (relation -> expression LT expression .)
    WRITE           reduce using rule 69 (relation -> expression LT expression .)
    READ            reduce using rule 69 (relation -> expression LT expression .)
    )               reduce using rule 69 (relation -> expression LT expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 167

    (71) relation -> expression GT expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    OR              reduce using rule 71 (relation -> expression GT expression .)
    AND             reduce using rule 71 (relation -> expression GT expression .)
    DO              reduce using rule 71 (relation -> expression GT expression .)
    THEN            reduce using rule 71 (relation -> expression GT expression .)
    WHILE           reduce using rule 71 (relation -> expression GT expression .)
    RETURN          reduce using rule 71 (relation -> expression GT expression .)
    SKIP            reduce using rule 71 (relation -> expression GT expression .)
    BREAK           reduce using rule 71 (relation -> expression GT expression .)
    BEGIN           reduce using rule 71 (relation -> expression GT expression .)
    IF              reduce using rule 71 (relation -> expression GT expression .)
    ID              reduce using rule 71 (relation -> expression GT expression .)
    PRINT           reduce using rule 71 (relation -> expression GT expression .)
    WRITE           reduce using rule 71 (relation -> expression GT expression .)
    READ            reduce using rule 71 (relation -> expression GT expression .)
    )               reduce using rule 71 (relation -> expression GT expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 168

    (61) inOutExpr -> WRITE ( expression ) .

    ELSE            reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    END             reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    ;               reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    WHILE           reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    RETURN          reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    SKIP            reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    BREAK           reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    BEGIN           reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    IF              reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    ID              reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    PRINT           reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    WRITE           reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    READ            reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)
    error           reduce using rule 61 (inOutExpr -> WRITE ( expression ) .)


state 169

    (55) functionCall -> ID ( paramslistop ) .

    ELSE            reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    END             reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    ;               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    WHILE           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    RETURN          reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    SKIP            reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    BREAK           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    BEGIN           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    IF              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    ID              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    PRINT           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    WRITE           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    READ            reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    error           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    LT              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    LE              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    GT              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    GE              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    NE              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    EQUAL           reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    +               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    -               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    *               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    /               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    ,               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    )               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    ]               reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    DO              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    OR              reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    AND             reduce using rule 55 (functionCall -> ID ( paramslistop ) .)
    THEN            reduce using rule 55 (functionCall -> ID ( paramslistop ) .)


state 170

    (58) paramList -> paramList , . expression
    (75) expression -> . expression + expression
    (76) expression -> . expression - expression
    (77) expression -> . expression * expression
    (78) expression -> . expression / expression
    (79) expression -> . - expression
    (80) expression -> . + expression
    (81) expression -> . ( expression )
    (82) expression -> . ID
    (83) expression -> . number
    (84) expression -> . ID [ expression ]
    (85) expression -> . casting
    (86) expression -> . functionCall
    (89) number -> . INTEGER
    (90) number -> . FLOATNUM
    (87) casting -> . INT ( expression )
    (88) casting -> . FLOAT ( expression )
    (55) functionCall -> . ID ( paramslistop )

    -               shift and go to state 82
    +               shift and go to state 81
    (               shift and go to state 80
    ID              shift and go to state 90
    INTEGER         shift and go to state 87
    FLOATNUM        shift and go to state 86
    INT             shift and go to state 84
    FLOAT           shift and go to state 79

    casting                        shift and go to state 88
    number                         shift and go to state 83
    functionCall                   shift and go to state 85
    expression                     shift and go to state 177

state 171

    (64) location -> ID [ expression ] .

    ASIGN           reduce using rule 64 (location -> ID [ expression ] .)
    )               reduce using rule 64 (location -> ID [ expression ] .)


state 172

    (51) ifthen -> IF relation THEN statement .
    (52) ifthenelse -> IF relation THEN statement . ELSE statement

    END             reduce using rule 51 (ifthen -> IF relation THEN statement .)
    ;               reduce using rule 51 (ifthen -> IF relation THEN statement .)
    WHILE           reduce using rule 51 (ifthen -> IF relation THEN statement .)
    RETURN          reduce using rule 51 (ifthen -> IF relation THEN statement .)
    SKIP            reduce using rule 51 (ifthen -> IF relation THEN statement .)
    BREAK           reduce using rule 51 (ifthen -> IF relation THEN statement .)
    BEGIN           reduce using rule 51 (ifthen -> IF relation THEN statement .)
    IF              reduce using rule 51 (ifthen -> IF relation THEN statement .)
    ID              reduce using rule 51 (ifthen -> IF relation THEN statement .)
    PRINT           reduce using rule 51 (ifthen -> IF relation THEN statement .)
    WRITE           reduce using rule 51 (ifthen -> IF relation THEN statement .)
    READ            reduce using rule 51 (ifthen -> IF relation THEN statement .)
    error           reduce using rule 51 (ifthen -> IF relation THEN statement .)
    ELSE            shift and go to state 178

  ! ELSE            [ reduce using rule 51 (ifthen -> IF relation THEN statement .) ]


state 173

    (54) ifthenelse -> IF relation statement ELSE . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 179
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 174

    (88) casting -> FLOAT ( expression ) .

    +               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    -               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    *               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    /               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    END             reduce using rule 88 (casting -> FLOAT ( expression ) .)
    ;               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    WHILE           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    RETURN          reduce using rule 88 (casting -> FLOAT ( expression ) .)
    SKIP            reduce using rule 88 (casting -> FLOAT ( expression ) .)
    BREAK           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    BEGIN           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    IF              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    ID              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    PRINT           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    WRITE           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    READ            reduce using rule 88 (casting -> FLOAT ( expression ) .)
    error           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    ELSE            reduce using rule 88 (casting -> FLOAT ( expression ) .)
    LT              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    LE              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    GT              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    GE              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    NE              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    EQUAL           reduce using rule 88 (casting -> FLOAT ( expression ) .)
    )               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    ,               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    ]               reduce using rule 88 (casting -> FLOAT ( expression ) .)
    DO              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    OR              reduce using rule 88 (casting -> FLOAT ( expression ) .)
    AND             reduce using rule 88 (casting -> FLOAT ( expression ) .)
    THEN            reduce using rule 88 (casting -> FLOAT ( expression ) .)


state 175

    (87) casting -> INT ( expression ) .

    +               reduce using rule 87 (casting -> INT ( expression ) .)
    -               reduce using rule 87 (casting -> INT ( expression ) .)
    *               reduce using rule 87 (casting -> INT ( expression ) .)
    /               reduce using rule 87 (casting -> INT ( expression ) .)
    END             reduce using rule 87 (casting -> INT ( expression ) .)
    ;               reduce using rule 87 (casting -> INT ( expression ) .)
    WHILE           reduce using rule 87 (casting -> INT ( expression ) .)
    RETURN          reduce using rule 87 (casting -> INT ( expression ) .)
    SKIP            reduce using rule 87 (casting -> INT ( expression ) .)
    BREAK           reduce using rule 87 (casting -> INT ( expression ) .)
    BEGIN           reduce using rule 87 (casting -> INT ( expression ) .)
    IF              reduce using rule 87 (casting -> INT ( expression ) .)
    ID              reduce using rule 87 (casting -> INT ( expression ) .)
    PRINT           reduce using rule 87 (casting -> INT ( expression ) .)
    WRITE           reduce using rule 87 (casting -> INT ( expression ) .)
    READ            reduce using rule 87 (casting -> INT ( expression ) .)
    error           reduce using rule 87 (casting -> INT ( expression ) .)
    ELSE            reduce using rule 87 (casting -> INT ( expression ) .)
    LT              reduce using rule 87 (casting -> INT ( expression ) .)
    LE              reduce using rule 87 (casting -> INT ( expression ) .)
    GT              reduce using rule 87 (casting -> INT ( expression ) .)
    GE              reduce using rule 87 (casting -> INT ( expression ) .)
    NE              reduce using rule 87 (casting -> INT ( expression ) .)
    EQUAL           reduce using rule 87 (casting -> INT ( expression ) .)
    )               reduce using rule 87 (casting -> INT ( expression ) .)
    ,               reduce using rule 87 (casting -> INT ( expression ) .)
    ]               reduce using rule 87 (casting -> INT ( expression ) .)
    DO              reduce using rule 87 (casting -> INT ( expression ) .)
    OR              reduce using rule 87 (casting -> INT ( expression ) .)
    AND             reduce using rule 87 (casting -> INT ( expression ) .)
    THEN            reduce using rule 87 (casting -> INT ( expression ) .)


state 176

    (84) expression -> ID [ expression ] .

    )               reduce using rule 84 (expression -> ID [ expression ] .)
    LT              reduce using rule 84 (expression -> ID [ expression ] .)
    LE              reduce using rule 84 (expression -> ID [ expression ] .)
    GT              reduce using rule 84 (expression -> ID [ expression ] .)
    GE              reduce using rule 84 (expression -> ID [ expression ] .)
    NE              reduce using rule 84 (expression -> ID [ expression ] .)
    EQUAL           reduce using rule 84 (expression -> ID [ expression ] .)
    +               reduce using rule 84 (expression -> ID [ expression ] .)
    -               reduce using rule 84 (expression -> ID [ expression ] .)
    *               reduce using rule 84 (expression -> ID [ expression ] .)
    /               reduce using rule 84 (expression -> ID [ expression ] .)
    END             reduce using rule 84 (expression -> ID [ expression ] .)
    ;               reduce using rule 84 (expression -> ID [ expression ] .)
    WHILE           reduce using rule 84 (expression -> ID [ expression ] .)
    RETURN          reduce using rule 84 (expression -> ID [ expression ] .)
    SKIP            reduce using rule 84 (expression -> ID [ expression ] .)
    BREAK           reduce using rule 84 (expression -> ID [ expression ] .)
    BEGIN           reduce using rule 84 (expression -> ID [ expression ] .)
    IF              reduce using rule 84 (expression -> ID [ expression ] .)
    ID              reduce using rule 84 (expression -> ID [ expression ] .)
    PRINT           reduce using rule 84 (expression -> ID [ expression ] .)
    WRITE           reduce using rule 84 (expression -> ID [ expression ] .)
    READ            reduce using rule 84 (expression -> ID [ expression ] .)
    error           reduce using rule 84 (expression -> ID [ expression ] .)
    ELSE            reduce using rule 84 (expression -> ID [ expression ] .)
    ,               reduce using rule 84 (expression -> ID [ expression ] .)
    ]               reduce using rule 84 (expression -> ID [ expression ] .)
    DO              reduce using rule 84 (expression -> ID [ expression ] .)
    OR              reduce using rule 84 (expression -> ID [ expression ] .)
    AND             reduce using rule 84 (expression -> ID [ expression ] .)
    THEN            reduce using rule 84 (expression -> ID [ expression ] .)


state 177

    (58) paramList -> paramList , expression .
    (75) expression -> expression . + expression
    (76) expression -> expression . - expression
    (77) expression -> expression . * expression
    (78) expression -> expression . / expression

    ,               reduce using rule 58 (paramList -> paramList , expression .)
    )               reduce using rule 58 (paramList -> paramList , expression .)
    +               shift and go to state 117
    -               shift and go to state 119
    *               shift and go to state 118
    /               shift and go to state 120


state 178

    (52) ifthenelse -> IF relation THEN statement ELSE . statement
    (39) statement -> . WHILE relation DO statement
    (40) statement -> . ifthen
    (41) statement -> . ifthenelse
    (42) statement -> . location ASIGN expression
    (43) statement -> . inOutExpr
    (44) statement -> . RETURN expression
    (45) statement -> . RETURN empty
    (46) statement -> . functionCall
    (47) statement -> . SKIP
    (48) statement -> . BREAK
    (49) statement -> . BEGIN statementBlock END
    (50) statement -> . BEGIN END
    (51) ifthen -> . IF relation THEN statement
    (53) ifthen -> . IF relation statement
    (52) ifthenelse -> . IF relation THEN statement ELSE statement
    (54) ifthenelse -> . IF relation statement ELSE statement
    (63) location -> . ID
    (64) location -> . ID [ expression ]
    (60) inOutExpr -> . PRINT ( STRING )
    (61) inOutExpr -> . WRITE ( expression )
    (62) inOutExpr -> . READ ( location )
    (55) functionCall -> . ID ( paramslistop )

    WHILE           shift and go to state 55
    RETURN          shift and go to state 51
    SKIP            shift and go to state 61
    BREAK           shift and go to state 66
    BEGIN           shift and go to state 57
    IF              shift and go to state 65
    ID              shift and go to state 64
    PRINT           shift and go to state 54
    WRITE           shift and go to state 62
    READ            shift and go to state 52

    ifthenelse                     shift and go to state 60
    inOutExpr                      shift and go to state 53
    location                       shift and go to state 58
    statement                      shift and go to state 180
    functionCall                   shift and go to state 63
    ifthen                         shift and go to state 56

state 179

    (54) ifthenelse -> IF relation statement ELSE statement .

    END             reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    ;               reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    error           reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    WHILE           reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    RETURN          reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    SKIP            reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    BREAK           reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    BEGIN           reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    IF              reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    ID              reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    PRINT           reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    WRITE           reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    READ            reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)
    ELSE            reduce using rule 54 (ifthenelse -> IF relation statement ELSE statement .)


state 180

    (52) ifthenelse -> IF relation THEN statement ELSE statement .

    END             reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    ;               reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    error           reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    WHILE           reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    RETURN          reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    SKIP            reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    BREAK           reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    BEGIN           reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    IF              reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    ID              reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    PRINT           reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    WRITE           reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    READ            reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)
    ELSE            reduce using rule 52 (ifthenelse -> IF relation THEN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 146 resolved as shift
