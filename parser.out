Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> program
Rule 1     program -> funlist
Rule 2     program -> error
Rule 3     funlist -> funlist function
Rule 4     funlist -> function
Rule 5     function -> FUN ID ( arglist ) localslist beginEndBlock
Rule 6     function -> FUN ID ( error ) localslist beginEndBlock
Rule 7     function -> FUN error ( arglist ) localslist beginEndBlock
Rule 8     function -> FUN ID ( arglist ) error beginEndBlock
Rule 9     beginEndBlock -> BEGIN statementBlock END
Rule 10    beginEndBlock -> BEGIN statementBlock ; END
Rule 11    beginEndBlock -> BEGIN END
Rule 12    beginEndBlock -> BEGIN error END
Rule 13    arglist -> args
Rule 14    arglist -> empty
Rule 15    arglist -> args ,
Rule 16    args -> var_decl
Rule 17    args -> args , var_decl
Rule 18    args -> args var_decl
Rule 19    localslist -> locals
Rule 20    localslist -> empty
Rule 21    locals -> locals var_or_fun
Rule 22    var_or_fun -> var_decl ;
Rule 23    var_or_fun -> function ;
Rule 24    locals -> var_decl ;
Rule 25    locals -> function ;
Rule 26    locals -> var_decl
Rule 27    var_or_fun -> var_decl error
Rule 28    locals -> function
Rule 29    var_or_fun -> function error
Rule 30    var_decl -> ID : type_specifier
Rule 31    var_decl -> ID type_specifier
Rule 32    var_decl -> ID ASIGN type_specifier
Rule 33    type_specifier -> simple_type
Rule 34    type_specifier -> simple_type [ INTEGER ]
Rule 35    simple_type -> INT
Rule 36    simple_type -> FLOAT
Rule 37    statementBlock -> statementBlock ; statement
Rule 38    statementBlock -> statement
Rule 39    statementBlock -> statementBlock statement
Rule 40    statement -> WHILE relation DO statement
Rule 41    statement -> ifthen
Rule 42    statement -> ifthenelse
Rule 43    statement -> location ASIGN expression
Rule 44    statement -> inOutExpr
Rule 45    statement -> RETURN ( expression )
Rule 46    statement -> RETURN ( empty )
Rule 47    statement -> RETURN error
Rule 48    statement -> functionCall
Rule 49    statement -> SKIP
Rule 50    statement -> BREAK
Rule 51    statement -> beginEndBlock
Rule 52    ifthen -> IF relation THEN statement
Rule 53    ifthenelse -> IF relation THEN statement ELSE statement
Rule 54    ifthen -> IF relation statement
Rule 55    ifthenelse -> IF relation error statement ELSE statement
Rule 56    functionCall -> ID ( paramslistop )
Rule 57    paramslistop -> paramList
Rule 58    paramslistop -> empty
Rule 59    paramList -> paramList , expression
Rule 60    paramList -> expression
Rule 61    inOutExpr -> PRINT ( STRING )
Rule 62    inOutExpr -> WRITE ( expression )
Rule 63    inOutExpr -> READ ( location )
Rule 64    location -> ID
Rule 65    location -> ID [ expression ]
Rule 66    relation -> relation OR relation
Rule 67    relation -> relation AND relation
Rule 68    relation -> NOT relation
Rule 69    relation -> ( relation )
Rule 70    relation -> expression LT expression
Rule 71    relation -> expression LE expression
Rule 72    relation -> expression GT expression
Rule 73    relation -> expression GE expression
Rule 74    relation -> expression NE expression
Rule 75    relation -> expression EQUAL expression
Rule 76    expression -> expression + expression
Rule 77    expression -> expression - expression
Rule 78    expression -> expression * expression
Rule 79    expression -> expression / expression
Rule 80    expression -> - expression
Rule 81    expression -> + expression
Rule 82    expression -> ( expression )
Rule 83    expression -> ID
Rule 84    expression -> number
Rule 85    expression -> ID [ expression ]
Rule 86    expression -> casting
Rule 87    expression -> functionCall
Rule 88    casting -> INT ( expression )
Rule 89    casting -> FLOAT ( expression )
Rule 90    number -> INTEGER
Rule 91    number -> FLOATNUM
Rule 92    empty -> <empty>

Terminals, with rules where they appear

(                    : 5 6 7 8 45 46 56 61 62 63 69 82 88 89
)                    : 5 6 7 8 45 46 56 61 62 63 69 82 88 89
*                    : 78
+                    : 76 81
,                    : 15 17 59
-                    : 77 80
/                    : 79
:                    : 30
;                    : 10 22 23 24 25 37
AND                  : 67
ASIGN                : 32 43
BEGIN                : 9 10 11 12
BREAK                : 50
DO                   : 40
ELSE                 : 53 55
END                  : 9 10 11 12
EQUAL                : 75
FLOAT                : 36 89
FLOATNUM             : 91
FUN                  : 5 6 7 8
GE                   : 73
GT                   : 72
ID                   : 5 6 8 30 31 32 56 64 65 83 85
IF                   : 52 53 54 55
INT                  : 35 88
INTEGER              : 34 90
LE                   : 71
LT                   : 70
NE                   : 74
NEWLINE              : 
NOT                  : 68
OR                   : 66
PRINT                : 61
READ                 : 63
RETURN               : 45 46 47
SKIP                 : 49
STRING               : 61
THEN                 : 52 53
WHILE                : 40
WRITE                : 62
[                    : 34 65 85
]                    : 34 65 85
error                : 2 6 7 8 12 27 29 47 55

Nonterminals, with rules where they appear

arglist              : 5 7 8
args                 : 13 15 17 18
beginEndBlock        : 5 6 7 8 51
casting              : 86
empty                : 14 20 46 58
expression           : 43 45 59 60 62 65 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 81 82 85 88 89
function             : 3 4 23 25 28 29
functionCall         : 48 87
funlist              : 1 3
ifthen               : 41
ifthenelse           : 42
inOutExpr            : 44
locals               : 19 21
localslist           : 5 6 7
location             : 43 63
number               : 84
paramList            : 57 59
paramslistop         : 56
program              : 0
relation             : 40 52 53 54 55 66 66 67 67 68 69
simple_type          : 33 34
statement            : 37 38 39 40 52 53 53 54 55 55
statementBlock       : 9 10 37 39
type_specifier       : 30 31 32
var_decl             : 16 17 18 22 24 26 27
var_or_fun           : 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funlist
    (2) program -> . error
    (3) funlist -> . funlist function
    (4) funlist -> . function
    (5) function -> . FUN ID ( arglist ) localslist beginEndBlock
    (6) function -> . FUN ID ( error ) localslist beginEndBlock
    (7) function -> . FUN error ( arglist ) localslist beginEndBlock
    (8) function -> . FUN ID ( arglist ) error beginEndBlock

    error           shift and go to state 4
    FUN             shift and go to state 5

    function                       shift and go to state 1
    funlist                        shift and go to state 2
    program                        shift and go to state 3

state 1

    (4) funlist -> function .

    FUN             reduce using rule 4 (funlist -> function .)
    $end            reduce using rule 4 (funlist -> function .)


state 2

    (1) program -> funlist .
    (3) funlist -> funlist . function
    (5) function -> . FUN ID ( arglist ) localslist beginEndBlock
    (6) function -> . FUN ID ( error ) localslist beginEndBlock
    (7) function -> . FUN error ( arglist ) localslist beginEndBlock
    (8) function -> . FUN ID ( arglist ) error beginEndBlock

    $end            reduce using rule 1 (program -> funlist .)
    FUN             shift and go to state 5

    function                       shift and go to state 6

state 3

    (0) S' -> program .



state 4

    (2) program -> error .

    $end            reduce using rule 2 (program -> error .)


state 5

    (5) function -> FUN . ID ( arglist ) localslist beginEndBlock
    (6) function -> FUN . ID ( error ) localslist beginEndBlock
    (7) function -> FUN . error ( arglist ) localslist beginEndBlock
    (8) function -> FUN . ID ( arglist ) error beginEndBlock

    ID              shift and go to state 8
    error           shift and go to state 7


state 6

    (3) funlist -> funlist function .

    FUN             reduce using rule 3 (funlist -> funlist function .)
    $end            reduce using rule 3 (funlist -> funlist function .)


state 7

    (7) function -> FUN error . ( arglist ) localslist beginEndBlock

    (               shift and go to state 9


state 8

    (5) function -> FUN ID . ( arglist ) localslist beginEndBlock
    (6) function -> FUN ID . ( error ) localslist beginEndBlock
    (8) function -> FUN ID . ( arglist ) error beginEndBlock

    (               shift and go to state 10


state 9

    (7) function -> FUN error ( . arglist ) localslist beginEndBlock
    (13) arglist -> . args
    (14) arglist -> . empty
    (15) arglist -> . args ,
    (16) args -> . var_decl
    (17) args -> . args , var_decl
    (18) args -> . args var_decl
    (92) empty -> .
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier

    )               reduce using rule 92 (empty -> .)
    ID              shift and go to state 14

    args                           shift and go to state 11
    var_decl                       shift and go to state 12
    arglist                        shift and go to state 13
    empty                          shift and go to state 15

state 10

    (5) function -> FUN ID ( . arglist ) localslist beginEndBlock
    (6) function -> FUN ID ( . error ) localslist beginEndBlock
    (8) function -> FUN ID ( . arglist ) error beginEndBlock
    (13) arglist -> . args
    (14) arglist -> . empty
    (15) arglist -> . args ,
    (16) args -> . var_decl
    (17) args -> . args , var_decl
    (18) args -> . args var_decl
    (92) empty -> .
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier

    error           shift and go to state 16
    )               reduce using rule 92 (empty -> .)
    ID              shift and go to state 14

    args                           shift and go to state 11
    var_decl                       shift and go to state 12
    arglist                        shift and go to state 17
    empty                          shift and go to state 15

state 11

    (13) arglist -> args .
    (15) arglist -> args . ,
    (17) args -> args . , var_decl
    (18) args -> args . var_decl
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier

    )               reduce using rule 13 (arglist -> args .)
    ,               shift and go to state 18
    ID              shift and go to state 14

    var_decl                       shift and go to state 19

state 12

    (16) args -> var_decl .

    ,               reduce using rule 16 (args -> var_decl .)
    ID              reduce using rule 16 (args -> var_decl .)
    )               reduce using rule 16 (args -> var_decl .)


state 13

    (7) function -> FUN error ( arglist . ) localslist beginEndBlock

    )               shift and go to state 20


state 14

    (30) var_decl -> ID . : type_specifier
    (31) var_decl -> ID . type_specifier
    (32) var_decl -> ID . ASIGN type_specifier
    (33) type_specifier -> . simple_type
    (34) type_specifier -> . simple_type [ INTEGER ]
    (35) simple_type -> . INT
    (36) simple_type -> . FLOAT

    :               shift and go to state 26
    ASIGN           shift and go to state 25
    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    type_specifier                 shift and go to state 21
    simple_type                    shift and go to state 22

state 15

    (14) arglist -> empty .

    )               reduce using rule 14 (arglist -> empty .)


state 16

    (6) function -> FUN ID ( error . ) localslist beginEndBlock

    )               shift and go to state 27


state 17

    (5) function -> FUN ID ( arglist . ) localslist beginEndBlock
    (8) function -> FUN ID ( arglist . ) error beginEndBlock

    )               shift and go to state 28


state 18

    (15) arglist -> args , .
    (17) args -> args , . var_decl
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier

    )               reduce using rule 15 (arglist -> args , .)
    ID              shift and go to state 14

    var_decl                       shift and go to state 29

state 19

    (18) args -> args var_decl .

    ,               reduce using rule 18 (args -> args var_decl .)
    ID              reduce using rule 18 (args -> args var_decl .)
    )               reduce using rule 18 (args -> args var_decl .)


state 20

    (7) function -> FUN error ( arglist ) . localslist beginEndBlock
    (19) localslist -> . locals
    (20) localslist -> . empty
    (21) locals -> . locals var_or_fun
    (24) locals -> . var_decl ;
    (25) locals -> . function ;
    (26) locals -> . var_decl
    (28) locals -> . function
    (92) empty -> .
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist beginEndBlock
    (6) function -> . FUN ID ( error ) localslist beginEndBlock
    (7) function -> . FUN error ( arglist ) localslist beginEndBlock
    (8) function -> . FUN ID ( arglist ) error beginEndBlock

    BEGIN           reduce using rule 92 (empty -> .)
    ID              shift and go to state 14
    FUN             shift and go to state 5

    function                       shift and go to state 30
    localslist                     shift and go to state 31
    var_decl                       shift and go to state 32
    locals                         shift and go to state 34
    empty                          shift and go to state 33

state 21

    (31) var_decl -> ID type_specifier .

    ;               reduce using rule 31 (var_decl -> ID type_specifier .)
    ID              reduce using rule 31 (var_decl -> ID type_specifier .)
    FUN             reduce using rule 31 (var_decl -> ID type_specifier .)
    BEGIN           reduce using rule 31 (var_decl -> ID type_specifier .)
    ,               reduce using rule 31 (var_decl -> ID type_specifier .)
    )               reduce using rule 31 (var_decl -> ID type_specifier .)
    error           reduce using rule 31 (var_decl -> ID type_specifier .)


state 22

    (33) type_specifier -> simple_type .
    (34) type_specifier -> simple_type . [ INTEGER ]

    ,               reduce using rule 33 (type_specifier -> simple_type .)
    ID              reduce using rule 33 (type_specifier -> simple_type .)
    )               reduce using rule 33 (type_specifier -> simple_type .)
    ;               reduce using rule 33 (type_specifier -> simple_type .)
    FUN             reduce using rule 33 (type_specifier -> simple_type .)
    BEGIN           reduce using rule 33 (type_specifier -> simple_type .)
    error           reduce using rule 33 (type_specifier -> simple_type .)
    [               shift and go to state 35


state 23

    (35) simple_type -> INT .

    [               reduce using rule 35 (simple_type -> INT .)
    ,               reduce using rule 35 (simple_type -> INT .)
    ID              reduce using rule 35 (simple_type -> INT .)
    )               reduce using rule 35 (simple_type -> INT .)
    ;               reduce using rule 35 (simple_type -> INT .)
    FUN             reduce using rule 35 (simple_type -> INT .)
    BEGIN           reduce using rule 35 (simple_type -> INT .)
    error           reduce using rule 35 (simple_type -> INT .)


state 24

    (36) simple_type -> FLOAT .

    [               reduce using rule 36 (simple_type -> FLOAT .)
    ,               reduce using rule 36 (simple_type -> FLOAT .)
    ID              reduce using rule 36 (simple_type -> FLOAT .)
    )               reduce using rule 36 (simple_type -> FLOAT .)
    ;               reduce using rule 36 (simple_type -> FLOAT .)
    FUN             reduce using rule 36 (simple_type -> FLOAT .)
    BEGIN           reduce using rule 36 (simple_type -> FLOAT .)
    error           reduce using rule 36 (simple_type -> FLOAT .)


state 25

    (32) var_decl -> ID ASIGN . type_specifier
    (33) type_specifier -> . simple_type
    (34) type_specifier -> . simple_type [ INTEGER ]
    (35) simple_type -> . INT
    (36) simple_type -> . FLOAT

    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    type_specifier                 shift and go to state 36
    simple_type                    shift and go to state 22

state 26

    (30) var_decl -> ID : . type_specifier
    (33) type_specifier -> . simple_type
    (34) type_specifier -> . simple_type [ INTEGER ]
    (35) simple_type -> . INT
    (36) simple_type -> . FLOAT

    INT             shift and go to state 23
    FLOAT           shift and go to state 24

    type_specifier                 shift and go to state 37
    simple_type                    shift and go to state 22

state 27

    (6) function -> FUN ID ( error ) . localslist beginEndBlock
    (19) localslist -> . locals
    (20) localslist -> . empty
    (21) locals -> . locals var_or_fun
    (24) locals -> . var_decl ;
    (25) locals -> . function ;
    (26) locals -> . var_decl
    (28) locals -> . function
    (92) empty -> .
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist beginEndBlock
    (6) function -> . FUN ID ( error ) localslist beginEndBlock
    (7) function -> . FUN error ( arglist ) localslist beginEndBlock
    (8) function -> . FUN ID ( arglist ) error beginEndBlock

    BEGIN           reduce using rule 92 (empty -> .)
    ID              shift and go to state 14
    FUN             shift and go to state 5

    function                       shift and go to state 30
    localslist                     shift and go to state 38
    var_decl                       shift and go to state 32
    locals                         shift and go to state 34
    empty                          shift and go to state 33

state 28

    (5) function -> FUN ID ( arglist ) . localslist beginEndBlock
    (8) function -> FUN ID ( arglist ) . error beginEndBlock
    (19) localslist -> . locals
    (20) localslist -> . empty
    (21) locals -> . locals var_or_fun
    (24) locals -> . var_decl ;
    (25) locals -> . function ;
    (26) locals -> . var_decl
    (28) locals -> . function
    (92) empty -> .
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist beginEndBlock
    (6) function -> . FUN ID ( error ) localslist beginEndBlock
    (7) function -> . FUN error ( arglist ) localslist beginEndBlock
    (8) function -> . FUN ID ( arglist ) error beginEndBlock

    error           shift and go to state 40
    BEGIN           reduce using rule 92 (empty -> .)
    ID              shift and go to state 14
    FUN             shift and go to state 5

    function                       shift and go to state 30
    localslist                     shift and go to state 39
    var_decl                       shift and go to state 32
    locals                         shift and go to state 34
    empty                          shift and go to state 33

state 29

    (17) args -> args , var_decl .

    ,               reduce using rule 17 (args -> args , var_decl .)
    ID              reduce using rule 17 (args -> args , var_decl .)
    )               reduce using rule 17 (args -> args , var_decl .)


state 30

    (25) locals -> function . ;
    (28) locals -> function .

    ;               shift and go to state 41
    ID              reduce using rule 28 (locals -> function .)
    FUN             reduce using rule 28 (locals -> function .)
    BEGIN           reduce using rule 28 (locals -> function .)


state 31

    (7) function -> FUN error ( arglist ) localslist . beginEndBlock
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    BEGIN           shift and go to state 42

    beginEndBlock                  shift and go to state 43

state 32

    (24) locals -> var_decl . ;
    (26) locals -> var_decl .

    ;               shift and go to state 44
    ID              reduce using rule 26 (locals -> var_decl .)
    FUN             reduce using rule 26 (locals -> var_decl .)
    BEGIN           reduce using rule 26 (locals -> var_decl .)


state 33

    (20) localslist -> empty .

    BEGIN           reduce using rule 20 (localslist -> empty .)


state 34

    (19) localslist -> locals .
    (21) locals -> locals . var_or_fun
    (22) var_or_fun -> . var_decl ;
    (23) var_or_fun -> . function ;
    (27) var_or_fun -> . var_decl error
    (29) var_or_fun -> . function error
    (30) var_decl -> . ID : type_specifier
    (31) var_decl -> . ID type_specifier
    (32) var_decl -> . ID ASIGN type_specifier
    (5) function -> . FUN ID ( arglist ) localslist beginEndBlock
    (6) function -> . FUN ID ( error ) localslist beginEndBlock
    (7) function -> . FUN error ( arglist ) localslist beginEndBlock
    (8) function -> . FUN ID ( arglist ) error beginEndBlock

    BEGIN           reduce using rule 19 (localslist -> locals .)
    ID              shift and go to state 14
    FUN             shift and go to state 5

    function                       shift and go to state 45
    var_or_fun                     shift and go to state 46
    var_decl                       shift and go to state 47

state 35

    (34) type_specifier -> simple_type [ . INTEGER ]

    INTEGER         shift and go to state 48


state 36

    (32) var_decl -> ID ASIGN type_specifier .

    ;               reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)
    ID              reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)
    FUN             reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)
    BEGIN           reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)
    ,               reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)
    )               reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)
    error           reduce using rule 32 (var_decl -> ID ASIGN type_specifier .)


state 37

    (30) var_decl -> ID : type_specifier .

    ;               reduce using rule 30 (var_decl -> ID : type_specifier .)
    ID              reduce using rule 30 (var_decl -> ID : type_specifier .)
    FUN             reduce using rule 30 (var_decl -> ID : type_specifier .)
    BEGIN           reduce using rule 30 (var_decl -> ID : type_specifier .)
    ,               reduce using rule 30 (var_decl -> ID : type_specifier .)
    )               reduce using rule 30 (var_decl -> ID : type_specifier .)
    error           reduce using rule 30 (var_decl -> ID : type_specifier .)


state 38

    (6) function -> FUN ID ( error ) localslist . beginEndBlock
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    BEGIN           shift and go to state 42

    beginEndBlock                  shift and go to state 49

state 39

    (5) function -> FUN ID ( arglist ) localslist . beginEndBlock
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    BEGIN           shift and go to state 42

    beginEndBlock                  shift and go to state 50

state 40

    (8) function -> FUN ID ( arglist ) error . beginEndBlock
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    BEGIN           shift and go to state 42

    beginEndBlock                  shift and go to state 51

state 41

    (25) locals -> function ; .

    ID              reduce using rule 25 (locals -> function ; .)
    FUN             reduce using rule 25 (locals -> function ; .)
    BEGIN           reduce using rule 25 (locals -> function ; .)


state 42

    (9) beginEndBlock -> BEGIN . statementBlock END
    (10) beginEndBlock -> BEGIN . statementBlock ; END
    (11) beginEndBlock -> BEGIN . END
    (12) beginEndBlock -> BEGIN . error END
    (37) statementBlock -> . statementBlock ; statement
    (38) statementBlock -> . statement
    (39) statementBlock -> . statementBlock statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    END             shift and go to state 61
    error           shift and go to state 69
    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    statementBlock                 shift and go to state 52
    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 60
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 43

    (7) function -> FUN error ( arglist ) localslist beginEndBlock .

    ;               reduce using rule 7 (function -> FUN error ( arglist ) localslist beginEndBlock .)
    ID              reduce using rule 7 (function -> FUN error ( arglist ) localslist beginEndBlock .)
    FUN             reduce using rule 7 (function -> FUN error ( arglist ) localslist beginEndBlock .)
    BEGIN           reduce using rule 7 (function -> FUN error ( arglist ) localslist beginEndBlock .)
    error           reduce using rule 7 (function -> FUN error ( arglist ) localslist beginEndBlock .)
    $end            reduce using rule 7 (function -> FUN error ( arglist ) localslist beginEndBlock .)


state 44

    (24) locals -> var_decl ; .

    ID              reduce using rule 24 (locals -> var_decl ; .)
    FUN             reduce using rule 24 (locals -> var_decl ; .)
    BEGIN           reduce using rule 24 (locals -> var_decl ; .)


state 45

    (23) var_or_fun -> function . ;
    (29) var_or_fun -> function . error

    ;               shift and go to state 71
    error           shift and go to state 72


state 46

    (21) locals -> locals var_or_fun .

    ID              reduce using rule 21 (locals -> locals var_or_fun .)
    FUN             reduce using rule 21 (locals -> locals var_or_fun .)
    BEGIN           reduce using rule 21 (locals -> locals var_or_fun .)


state 47

    (22) var_or_fun -> var_decl . ;
    (27) var_or_fun -> var_decl . error

    ;               shift and go to state 73
    error           shift and go to state 74


state 48

    (34) type_specifier -> simple_type [ INTEGER . ]

    ]               shift and go to state 75


state 49

    (6) function -> FUN ID ( error ) localslist beginEndBlock .

    ;               reduce using rule 6 (function -> FUN ID ( error ) localslist beginEndBlock .)
    ID              reduce using rule 6 (function -> FUN ID ( error ) localslist beginEndBlock .)
    FUN             reduce using rule 6 (function -> FUN ID ( error ) localslist beginEndBlock .)
    BEGIN           reduce using rule 6 (function -> FUN ID ( error ) localslist beginEndBlock .)
    error           reduce using rule 6 (function -> FUN ID ( error ) localslist beginEndBlock .)
    $end            reduce using rule 6 (function -> FUN ID ( error ) localslist beginEndBlock .)


state 50

    (5) function -> FUN ID ( arglist ) localslist beginEndBlock .

    ;               reduce using rule 5 (function -> FUN ID ( arglist ) localslist beginEndBlock .)
    ID              reduce using rule 5 (function -> FUN ID ( arglist ) localslist beginEndBlock .)
    FUN             reduce using rule 5 (function -> FUN ID ( arglist ) localslist beginEndBlock .)
    BEGIN           reduce using rule 5 (function -> FUN ID ( arglist ) localslist beginEndBlock .)
    error           reduce using rule 5 (function -> FUN ID ( arglist ) localslist beginEndBlock .)
    $end            reduce using rule 5 (function -> FUN ID ( arglist ) localslist beginEndBlock .)


state 51

    (8) function -> FUN ID ( arglist ) error beginEndBlock .

    ;               reduce using rule 8 (function -> FUN ID ( arglist ) error beginEndBlock .)
    ID              reduce using rule 8 (function -> FUN ID ( arglist ) error beginEndBlock .)
    FUN             reduce using rule 8 (function -> FUN ID ( arglist ) error beginEndBlock .)
    BEGIN           reduce using rule 8 (function -> FUN ID ( arglist ) error beginEndBlock .)
    error           reduce using rule 8 (function -> FUN ID ( arglist ) error beginEndBlock .)
    $end            reduce using rule 8 (function -> FUN ID ( arglist ) error beginEndBlock .)


state 52

    (9) beginEndBlock -> BEGIN statementBlock . END
    (10) beginEndBlock -> BEGIN statementBlock . ; END
    (37) statementBlock -> statementBlock . ; statement
    (39) statementBlock -> statementBlock . statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    END             shift and go to state 78
    ;               shift and go to state 77
    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 76
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 53

    (45) statement -> RETURN . ( expression )
    (46) statement -> RETURN . ( empty )
    (47) statement -> RETURN . error

    (               shift and go to state 79
    error           shift and go to state 80


state 54

    (63) inOutExpr -> READ . ( location )

    (               shift and go to state 81


state 55

    (44) statement -> inOutExpr .

    END             reduce using rule 44 (statement -> inOutExpr .)
    ;               reduce using rule 44 (statement -> inOutExpr .)
    WHILE           reduce using rule 44 (statement -> inOutExpr .)
    RETURN          reduce using rule 44 (statement -> inOutExpr .)
    SKIP            reduce using rule 44 (statement -> inOutExpr .)
    BREAK           reduce using rule 44 (statement -> inOutExpr .)
    IF              reduce using rule 44 (statement -> inOutExpr .)
    ID              reduce using rule 44 (statement -> inOutExpr .)
    PRINT           reduce using rule 44 (statement -> inOutExpr .)
    WRITE           reduce using rule 44 (statement -> inOutExpr .)
    READ            reduce using rule 44 (statement -> inOutExpr .)
    BEGIN           reduce using rule 44 (statement -> inOutExpr .)
    ELSE            reduce using rule 44 (statement -> inOutExpr .)


state 56

    (40) statement -> WHILE . relation DO statement
    (66) relation -> . relation OR relation
    (67) relation -> . relation AND relation
    (68) relation -> . NOT relation
    (69) relation -> . ( relation )
    (70) relation -> . expression LT expression
    (71) relation -> . expression LE expression
    (72) relation -> . expression GT expression
    (73) relation -> . expression GE expression
    (74) relation -> . expression NE expression
    (75) relation -> . expression EQUAL expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 94
    (               shift and go to state 85
    -               shift and go to state 87
    +               shift and go to state 86
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    functionCall                   shift and go to state 90
    relation                       shift and go to state 84
    expression                     shift and go to state 95

state 57

    (61) inOutExpr -> PRINT . ( STRING )

    (               shift and go to state 96


state 58

    (41) statement -> ifthen .

    END             reduce using rule 41 (statement -> ifthen .)
    ;               reduce using rule 41 (statement -> ifthen .)
    WHILE           reduce using rule 41 (statement -> ifthen .)
    RETURN          reduce using rule 41 (statement -> ifthen .)
    SKIP            reduce using rule 41 (statement -> ifthen .)
    BREAK           reduce using rule 41 (statement -> ifthen .)
    IF              reduce using rule 41 (statement -> ifthen .)
    ID              reduce using rule 41 (statement -> ifthen .)
    PRINT           reduce using rule 41 (statement -> ifthen .)
    WRITE           reduce using rule 41 (statement -> ifthen .)
    READ            reduce using rule 41 (statement -> ifthen .)
    BEGIN           reduce using rule 41 (statement -> ifthen .)
    ELSE            reduce using rule 41 (statement -> ifthen .)


state 59

    (43) statement -> location . ASIGN expression

    ASIGN           shift and go to state 97


state 60

    (38) statementBlock -> statement .

    END             reduce using rule 38 (statementBlock -> statement .)
    ;               reduce using rule 38 (statementBlock -> statement .)
    WHILE           reduce using rule 38 (statementBlock -> statement .)
    RETURN          reduce using rule 38 (statementBlock -> statement .)
    SKIP            reduce using rule 38 (statementBlock -> statement .)
    BREAK           reduce using rule 38 (statementBlock -> statement .)
    IF              reduce using rule 38 (statementBlock -> statement .)
    ID              reduce using rule 38 (statementBlock -> statement .)
    PRINT           reduce using rule 38 (statementBlock -> statement .)
    WRITE           reduce using rule 38 (statementBlock -> statement .)
    READ            reduce using rule 38 (statementBlock -> statement .)
    BEGIN           reduce using rule 38 (statementBlock -> statement .)


state 61

    (11) beginEndBlock -> BEGIN END .

    FUN             reduce using rule 11 (beginEndBlock -> BEGIN END .)
    $end            reduce using rule 11 (beginEndBlock -> BEGIN END .)
    ;               reduce using rule 11 (beginEndBlock -> BEGIN END .)
    ID              reduce using rule 11 (beginEndBlock -> BEGIN END .)
    BEGIN           reduce using rule 11 (beginEndBlock -> BEGIN END .)
    error           reduce using rule 11 (beginEndBlock -> BEGIN END .)
    END             reduce using rule 11 (beginEndBlock -> BEGIN END .)
    WHILE           reduce using rule 11 (beginEndBlock -> BEGIN END .)
    RETURN          reduce using rule 11 (beginEndBlock -> BEGIN END .)
    SKIP            reduce using rule 11 (beginEndBlock -> BEGIN END .)
    BREAK           reduce using rule 11 (beginEndBlock -> BEGIN END .)
    IF              reduce using rule 11 (beginEndBlock -> BEGIN END .)
    PRINT           reduce using rule 11 (beginEndBlock -> BEGIN END .)
    WRITE           reduce using rule 11 (beginEndBlock -> BEGIN END .)
    READ            reduce using rule 11 (beginEndBlock -> BEGIN END .)
    ELSE            reduce using rule 11 (beginEndBlock -> BEGIN END .)


state 62

    (42) statement -> ifthenelse .

    END             reduce using rule 42 (statement -> ifthenelse .)
    ;               reduce using rule 42 (statement -> ifthenelse .)
    WHILE           reduce using rule 42 (statement -> ifthenelse .)
    RETURN          reduce using rule 42 (statement -> ifthenelse .)
    SKIP            reduce using rule 42 (statement -> ifthenelse .)
    BREAK           reduce using rule 42 (statement -> ifthenelse .)
    IF              reduce using rule 42 (statement -> ifthenelse .)
    ID              reduce using rule 42 (statement -> ifthenelse .)
    PRINT           reduce using rule 42 (statement -> ifthenelse .)
    WRITE           reduce using rule 42 (statement -> ifthenelse .)
    READ            reduce using rule 42 (statement -> ifthenelse .)
    BEGIN           reduce using rule 42 (statement -> ifthenelse .)
    ELSE            reduce using rule 42 (statement -> ifthenelse .)


state 63

    (49) statement -> SKIP .

    END             reduce using rule 49 (statement -> SKIP .)
    ;               reduce using rule 49 (statement -> SKIP .)
    WHILE           reduce using rule 49 (statement -> SKIP .)
    RETURN          reduce using rule 49 (statement -> SKIP .)
    SKIP            reduce using rule 49 (statement -> SKIP .)
    BREAK           reduce using rule 49 (statement -> SKIP .)
    IF              reduce using rule 49 (statement -> SKIP .)
    ID              reduce using rule 49 (statement -> SKIP .)
    PRINT           reduce using rule 49 (statement -> SKIP .)
    WRITE           reduce using rule 49 (statement -> SKIP .)
    READ            reduce using rule 49 (statement -> SKIP .)
    BEGIN           reduce using rule 49 (statement -> SKIP .)
    ELSE            reduce using rule 49 (statement -> SKIP .)


state 64

    (62) inOutExpr -> WRITE . ( expression )

    (               shift and go to state 98


state 65

    (48) statement -> functionCall .

    END             reduce using rule 48 (statement -> functionCall .)
    ;               reduce using rule 48 (statement -> functionCall .)
    WHILE           reduce using rule 48 (statement -> functionCall .)
    RETURN          reduce using rule 48 (statement -> functionCall .)
    SKIP            reduce using rule 48 (statement -> functionCall .)
    BREAK           reduce using rule 48 (statement -> functionCall .)
    IF              reduce using rule 48 (statement -> functionCall .)
    ID              reduce using rule 48 (statement -> functionCall .)
    PRINT           reduce using rule 48 (statement -> functionCall .)
    WRITE           reduce using rule 48 (statement -> functionCall .)
    READ            reduce using rule 48 (statement -> functionCall .)
    BEGIN           reduce using rule 48 (statement -> functionCall .)
    ELSE            reduce using rule 48 (statement -> functionCall .)


state 66

    (64) location -> ID .
    (65) location -> ID . [ expression ]
    (56) functionCall -> ID . ( paramslistop )

    ASIGN           reduce using rule 64 (location -> ID .)
    [               shift and go to state 100
    (               shift and go to state 99


state 67

    (52) ifthen -> IF . relation THEN statement
    (54) ifthen -> IF . relation statement
    (53) ifthenelse -> IF . relation THEN statement ELSE statement
    (55) ifthenelse -> IF . relation error statement ELSE statement
    (66) relation -> . relation OR relation
    (67) relation -> . relation AND relation
    (68) relation -> . NOT relation
    (69) relation -> . ( relation )
    (70) relation -> . expression LT expression
    (71) relation -> . expression LE expression
    (72) relation -> . expression GT expression
    (73) relation -> . expression GE expression
    (74) relation -> . expression NE expression
    (75) relation -> . expression EQUAL expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 94
    (               shift and go to state 85
    -               shift and go to state 87
    +               shift and go to state 86
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    functionCall                   shift and go to state 90
    relation                       shift and go to state 101
    expression                     shift and go to state 95

state 68

    (50) statement -> BREAK .

    END             reduce using rule 50 (statement -> BREAK .)
    ;               reduce using rule 50 (statement -> BREAK .)
    WHILE           reduce using rule 50 (statement -> BREAK .)
    RETURN          reduce using rule 50 (statement -> BREAK .)
    SKIP            reduce using rule 50 (statement -> BREAK .)
    BREAK           reduce using rule 50 (statement -> BREAK .)
    IF              reduce using rule 50 (statement -> BREAK .)
    ID              reduce using rule 50 (statement -> BREAK .)
    PRINT           reduce using rule 50 (statement -> BREAK .)
    WRITE           reduce using rule 50 (statement -> BREAK .)
    READ            reduce using rule 50 (statement -> BREAK .)
    BEGIN           reduce using rule 50 (statement -> BREAK .)
    ELSE            reduce using rule 50 (statement -> BREAK .)


state 69

    (12) beginEndBlock -> BEGIN error . END

    END             shift and go to state 102


state 70

    (51) statement -> beginEndBlock .

    END             reduce using rule 51 (statement -> beginEndBlock .)
    ;               reduce using rule 51 (statement -> beginEndBlock .)
    WHILE           reduce using rule 51 (statement -> beginEndBlock .)
    RETURN          reduce using rule 51 (statement -> beginEndBlock .)
    SKIP            reduce using rule 51 (statement -> beginEndBlock .)
    BREAK           reduce using rule 51 (statement -> beginEndBlock .)
    IF              reduce using rule 51 (statement -> beginEndBlock .)
    ID              reduce using rule 51 (statement -> beginEndBlock .)
    PRINT           reduce using rule 51 (statement -> beginEndBlock .)
    WRITE           reduce using rule 51 (statement -> beginEndBlock .)
    READ            reduce using rule 51 (statement -> beginEndBlock .)
    BEGIN           reduce using rule 51 (statement -> beginEndBlock .)
    ELSE            reduce using rule 51 (statement -> beginEndBlock .)


state 71

    (23) var_or_fun -> function ; .

    ID              reduce using rule 23 (var_or_fun -> function ; .)
    FUN             reduce using rule 23 (var_or_fun -> function ; .)
    BEGIN           reduce using rule 23 (var_or_fun -> function ; .)


state 72

    (29) var_or_fun -> function error .

    ID              reduce using rule 29 (var_or_fun -> function error .)
    FUN             reduce using rule 29 (var_or_fun -> function error .)
    BEGIN           reduce using rule 29 (var_or_fun -> function error .)


state 73

    (22) var_or_fun -> var_decl ; .

    ID              reduce using rule 22 (var_or_fun -> var_decl ; .)
    FUN             reduce using rule 22 (var_or_fun -> var_decl ; .)
    BEGIN           reduce using rule 22 (var_or_fun -> var_decl ; .)


state 74

    (27) var_or_fun -> var_decl error .

    ID              reduce using rule 27 (var_or_fun -> var_decl error .)
    FUN             reduce using rule 27 (var_or_fun -> var_decl error .)
    BEGIN           reduce using rule 27 (var_or_fun -> var_decl error .)


state 75

    (34) type_specifier -> simple_type [ INTEGER ] .

    ,               reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)
    ID              reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)
    )               reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)
    ;               reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)
    FUN             reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)
    BEGIN           reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)
    error           reduce using rule 34 (type_specifier -> simple_type [ INTEGER ] .)


state 76

    (39) statementBlock -> statementBlock statement .

    END             reduce using rule 39 (statementBlock -> statementBlock statement .)
    ;               reduce using rule 39 (statementBlock -> statementBlock statement .)
    WHILE           reduce using rule 39 (statementBlock -> statementBlock statement .)
    RETURN          reduce using rule 39 (statementBlock -> statementBlock statement .)
    SKIP            reduce using rule 39 (statementBlock -> statementBlock statement .)
    BREAK           reduce using rule 39 (statementBlock -> statementBlock statement .)
    IF              reduce using rule 39 (statementBlock -> statementBlock statement .)
    ID              reduce using rule 39 (statementBlock -> statementBlock statement .)
    PRINT           reduce using rule 39 (statementBlock -> statementBlock statement .)
    WRITE           reduce using rule 39 (statementBlock -> statementBlock statement .)
    READ            reduce using rule 39 (statementBlock -> statementBlock statement .)
    BEGIN           reduce using rule 39 (statementBlock -> statementBlock statement .)


state 77

    (10) beginEndBlock -> BEGIN statementBlock ; . END
    (37) statementBlock -> statementBlock ; . statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    END             shift and go to state 104
    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 103
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 78

    (9) beginEndBlock -> BEGIN statementBlock END .

    FUN             reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    $end            reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    ;               reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    ID              reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    BEGIN           reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    error           reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    END             reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    WHILE           reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    RETURN          reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    SKIP            reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    BREAK           reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    IF              reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    PRINT           reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    WRITE           reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    READ            reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)
    ELSE            reduce using rule 9 (beginEndBlock -> BEGIN statementBlock END .)


state 79

    (45) statement -> RETURN ( . expression )
    (46) statement -> RETURN ( . empty )
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (92) empty -> .
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    )               reduce using rule 92 (empty -> .)
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    functionCall                   shift and go to state 90
    expression                     shift and go to state 106
    empty                          shift and go to state 107

state 80

    (47) statement -> RETURN error .

    END             reduce using rule 47 (statement -> RETURN error .)
    ;               reduce using rule 47 (statement -> RETURN error .)
    WHILE           reduce using rule 47 (statement -> RETURN error .)
    RETURN          reduce using rule 47 (statement -> RETURN error .)
    SKIP            reduce using rule 47 (statement -> RETURN error .)
    BREAK           reduce using rule 47 (statement -> RETURN error .)
    IF              reduce using rule 47 (statement -> RETURN error .)
    ID              reduce using rule 47 (statement -> RETURN error .)
    PRINT           reduce using rule 47 (statement -> RETURN error .)
    WRITE           reduce using rule 47 (statement -> RETURN error .)
    READ            reduce using rule 47 (statement -> RETURN error .)
    BEGIN           reduce using rule 47 (statement -> RETURN error .)
    ELSE            reduce using rule 47 (statement -> RETURN error .)


state 81

    (63) inOutExpr -> READ ( . location )
    (64) location -> . ID
    (65) location -> . ID [ expression ]

    ID              shift and go to state 109

    location                       shift and go to state 108

state 82

    (84) expression -> number .

    LT              reduce using rule 84 (expression -> number .)
    LE              reduce using rule 84 (expression -> number .)
    GT              reduce using rule 84 (expression -> number .)
    GE              reduce using rule 84 (expression -> number .)
    NE              reduce using rule 84 (expression -> number .)
    EQUAL           reduce using rule 84 (expression -> number .)
    +               reduce using rule 84 (expression -> number .)
    -               reduce using rule 84 (expression -> number .)
    *               reduce using rule 84 (expression -> number .)
    /               reduce using rule 84 (expression -> number .)
    DO              reduce using rule 84 (expression -> number .)
    OR              reduce using rule 84 (expression -> number .)
    AND             reduce using rule 84 (expression -> number .)
    THEN            reduce using rule 84 (expression -> number .)
    error           reduce using rule 84 (expression -> number .)
    WHILE           reduce using rule 84 (expression -> number .)
    RETURN          reduce using rule 84 (expression -> number .)
    SKIP            reduce using rule 84 (expression -> number .)
    BREAK           reduce using rule 84 (expression -> number .)
    IF              reduce using rule 84 (expression -> number .)
    ID              reduce using rule 84 (expression -> number .)
    PRINT           reduce using rule 84 (expression -> number .)
    WRITE           reduce using rule 84 (expression -> number .)
    READ            reduce using rule 84 (expression -> number .)
    BEGIN           reduce using rule 84 (expression -> number .)
    )               reduce using rule 84 (expression -> number .)
    ]               reduce using rule 84 (expression -> number .)
    END             reduce using rule 84 (expression -> number .)
    ;               reduce using rule 84 (expression -> number .)
    ELSE            reduce using rule 84 (expression -> number .)
    ,               reduce using rule 84 (expression -> number .)


state 83

    (91) number -> FLOATNUM .

    +               reduce using rule 91 (number -> FLOATNUM .)
    -               reduce using rule 91 (number -> FLOATNUM .)
    *               reduce using rule 91 (number -> FLOATNUM .)
    /               reduce using rule 91 (number -> FLOATNUM .)
    ,               reduce using rule 91 (number -> FLOATNUM .)
    )               reduce using rule 91 (number -> FLOATNUM .)
    END             reduce using rule 91 (number -> FLOATNUM .)
    ;               reduce using rule 91 (number -> FLOATNUM .)
    WHILE           reduce using rule 91 (number -> FLOATNUM .)
    RETURN          reduce using rule 91 (number -> FLOATNUM .)
    SKIP            reduce using rule 91 (number -> FLOATNUM .)
    BREAK           reduce using rule 91 (number -> FLOATNUM .)
    IF              reduce using rule 91 (number -> FLOATNUM .)
    ID              reduce using rule 91 (number -> FLOATNUM .)
    PRINT           reduce using rule 91 (number -> FLOATNUM .)
    WRITE           reduce using rule 91 (number -> FLOATNUM .)
    READ            reduce using rule 91 (number -> FLOATNUM .)
    BEGIN           reduce using rule 91 (number -> FLOATNUM .)
    ELSE            reduce using rule 91 (number -> FLOATNUM .)
    DO              reduce using rule 91 (number -> FLOATNUM .)
    OR              reduce using rule 91 (number -> FLOATNUM .)
    AND             reduce using rule 91 (number -> FLOATNUM .)
    THEN            reduce using rule 91 (number -> FLOATNUM .)
    error           reduce using rule 91 (number -> FLOATNUM .)
    LT              reduce using rule 91 (number -> FLOATNUM .)
    LE              reduce using rule 91 (number -> FLOATNUM .)
    GT              reduce using rule 91 (number -> FLOATNUM .)
    GE              reduce using rule 91 (number -> FLOATNUM .)
    NE              reduce using rule 91 (number -> FLOATNUM .)
    EQUAL           reduce using rule 91 (number -> FLOATNUM .)
    ]               reduce using rule 91 (number -> FLOATNUM .)


state 84

    (40) statement -> WHILE relation . DO statement
    (66) relation -> relation . OR relation
    (67) relation -> relation . AND relation

    DO              shift and go to state 111
    OR              shift and go to state 112
    AND             shift and go to state 110


state 85

    (69) relation -> ( . relation )
    (82) expression -> ( . expression )
    (66) relation -> . relation OR relation
    (67) relation -> . relation AND relation
    (68) relation -> . NOT relation
    (69) relation -> . ( relation )
    (70) relation -> . expression LT expression
    (71) relation -> . expression LE expression
    (72) relation -> . expression GT expression
    (73) relation -> . expression GE expression
    (74) relation -> . expression NE expression
    (75) relation -> . expression EQUAL expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 94
    (               shift and go to state 85
    -               shift and go to state 87
    +               shift and go to state 86
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    relation                       shift and go to state 113
    functionCall                   shift and go to state 90
    expression                     shift and go to state 114

state 86

    (81) expression -> + . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 115
    number                         shift and go to state 82

state 87

    (80) expression -> - . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 116
    number                         shift and go to state 82

state 88

    (90) number -> INTEGER .

    +               reduce using rule 90 (number -> INTEGER .)
    -               reduce using rule 90 (number -> INTEGER .)
    *               reduce using rule 90 (number -> INTEGER .)
    /               reduce using rule 90 (number -> INTEGER .)
    ,               reduce using rule 90 (number -> INTEGER .)
    )               reduce using rule 90 (number -> INTEGER .)
    END             reduce using rule 90 (number -> INTEGER .)
    ;               reduce using rule 90 (number -> INTEGER .)
    WHILE           reduce using rule 90 (number -> INTEGER .)
    RETURN          reduce using rule 90 (number -> INTEGER .)
    SKIP            reduce using rule 90 (number -> INTEGER .)
    BREAK           reduce using rule 90 (number -> INTEGER .)
    IF              reduce using rule 90 (number -> INTEGER .)
    ID              reduce using rule 90 (number -> INTEGER .)
    PRINT           reduce using rule 90 (number -> INTEGER .)
    WRITE           reduce using rule 90 (number -> INTEGER .)
    READ            reduce using rule 90 (number -> INTEGER .)
    BEGIN           reduce using rule 90 (number -> INTEGER .)
    ELSE            reduce using rule 90 (number -> INTEGER .)
    DO              reduce using rule 90 (number -> INTEGER .)
    OR              reduce using rule 90 (number -> INTEGER .)
    AND             reduce using rule 90 (number -> INTEGER .)
    THEN            reduce using rule 90 (number -> INTEGER .)
    error           reduce using rule 90 (number -> INTEGER .)
    LT              reduce using rule 90 (number -> INTEGER .)
    LE              reduce using rule 90 (number -> INTEGER .)
    GT              reduce using rule 90 (number -> INTEGER .)
    GE              reduce using rule 90 (number -> INTEGER .)
    NE              reduce using rule 90 (number -> INTEGER .)
    EQUAL           reduce using rule 90 (number -> INTEGER .)
    ]               reduce using rule 90 (number -> INTEGER .)


state 89

    (86) expression -> casting .

    LT              reduce using rule 86 (expression -> casting .)
    LE              reduce using rule 86 (expression -> casting .)
    GT              reduce using rule 86 (expression -> casting .)
    GE              reduce using rule 86 (expression -> casting .)
    NE              reduce using rule 86 (expression -> casting .)
    EQUAL           reduce using rule 86 (expression -> casting .)
    +               reduce using rule 86 (expression -> casting .)
    -               reduce using rule 86 (expression -> casting .)
    *               reduce using rule 86 (expression -> casting .)
    /               reduce using rule 86 (expression -> casting .)
    DO              reduce using rule 86 (expression -> casting .)
    OR              reduce using rule 86 (expression -> casting .)
    AND             reduce using rule 86 (expression -> casting .)
    THEN            reduce using rule 86 (expression -> casting .)
    error           reduce using rule 86 (expression -> casting .)
    WHILE           reduce using rule 86 (expression -> casting .)
    RETURN          reduce using rule 86 (expression -> casting .)
    SKIP            reduce using rule 86 (expression -> casting .)
    BREAK           reduce using rule 86 (expression -> casting .)
    IF              reduce using rule 86 (expression -> casting .)
    ID              reduce using rule 86 (expression -> casting .)
    PRINT           reduce using rule 86 (expression -> casting .)
    WRITE           reduce using rule 86 (expression -> casting .)
    READ            reduce using rule 86 (expression -> casting .)
    BEGIN           reduce using rule 86 (expression -> casting .)
    )               reduce using rule 86 (expression -> casting .)
    ]               reduce using rule 86 (expression -> casting .)
    END             reduce using rule 86 (expression -> casting .)
    ;               reduce using rule 86 (expression -> casting .)
    ELSE            reduce using rule 86 (expression -> casting .)
    ,               reduce using rule 86 (expression -> casting .)


state 90

    (87) expression -> functionCall .

    LT              reduce using rule 87 (expression -> functionCall .)
    LE              reduce using rule 87 (expression -> functionCall .)
    GT              reduce using rule 87 (expression -> functionCall .)
    GE              reduce using rule 87 (expression -> functionCall .)
    NE              reduce using rule 87 (expression -> functionCall .)
    EQUAL           reduce using rule 87 (expression -> functionCall .)
    +               reduce using rule 87 (expression -> functionCall .)
    -               reduce using rule 87 (expression -> functionCall .)
    *               reduce using rule 87 (expression -> functionCall .)
    /               reduce using rule 87 (expression -> functionCall .)
    DO              reduce using rule 87 (expression -> functionCall .)
    OR              reduce using rule 87 (expression -> functionCall .)
    AND             reduce using rule 87 (expression -> functionCall .)
    THEN            reduce using rule 87 (expression -> functionCall .)
    error           reduce using rule 87 (expression -> functionCall .)
    WHILE           reduce using rule 87 (expression -> functionCall .)
    RETURN          reduce using rule 87 (expression -> functionCall .)
    SKIP            reduce using rule 87 (expression -> functionCall .)
    BREAK           reduce using rule 87 (expression -> functionCall .)
    IF              reduce using rule 87 (expression -> functionCall .)
    ID              reduce using rule 87 (expression -> functionCall .)
    PRINT           reduce using rule 87 (expression -> functionCall .)
    WRITE           reduce using rule 87 (expression -> functionCall .)
    READ            reduce using rule 87 (expression -> functionCall .)
    BEGIN           reduce using rule 87 (expression -> functionCall .)
    )               reduce using rule 87 (expression -> functionCall .)
    ]               reduce using rule 87 (expression -> functionCall .)
    END             reduce using rule 87 (expression -> functionCall .)
    ;               reduce using rule 87 (expression -> functionCall .)
    ELSE            reduce using rule 87 (expression -> functionCall .)
    ,               reduce using rule 87 (expression -> functionCall .)


state 91

    (83) expression -> ID .
    (85) expression -> ID . [ expression ]
    (56) functionCall -> ID . ( paramslistop )

    LT              reduce using rule 83 (expression -> ID .)
    LE              reduce using rule 83 (expression -> ID .)
    GT              reduce using rule 83 (expression -> ID .)
    GE              reduce using rule 83 (expression -> ID .)
    NE              reduce using rule 83 (expression -> ID .)
    EQUAL           reduce using rule 83 (expression -> ID .)
    +               reduce using rule 83 (expression -> ID .)
    -               reduce using rule 83 (expression -> ID .)
    *               reduce using rule 83 (expression -> ID .)
    /               reduce using rule 83 (expression -> ID .)
    DO              reduce using rule 83 (expression -> ID .)
    OR              reduce using rule 83 (expression -> ID .)
    AND             reduce using rule 83 (expression -> ID .)
    THEN            reduce using rule 83 (expression -> ID .)
    error           reduce using rule 83 (expression -> ID .)
    WHILE           reduce using rule 83 (expression -> ID .)
    RETURN          reduce using rule 83 (expression -> ID .)
    SKIP            reduce using rule 83 (expression -> ID .)
    BREAK           reduce using rule 83 (expression -> ID .)
    IF              reduce using rule 83 (expression -> ID .)
    ID              reduce using rule 83 (expression -> ID .)
    PRINT           reduce using rule 83 (expression -> ID .)
    WRITE           reduce using rule 83 (expression -> ID .)
    READ            reduce using rule 83 (expression -> ID .)
    BEGIN           reduce using rule 83 (expression -> ID .)
    )               reduce using rule 83 (expression -> ID .)
    ]               reduce using rule 83 (expression -> ID .)
    END             reduce using rule 83 (expression -> ID .)
    ;               reduce using rule 83 (expression -> ID .)
    ELSE            reduce using rule 83 (expression -> ID .)
    ,               reduce using rule 83 (expression -> ID .)
    [               shift and go to state 117
    (               shift and go to state 99


state 92

    (88) casting -> INT . ( expression )

    (               shift and go to state 118


state 93

    (89) casting -> FLOAT . ( expression )

    (               shift and go to state 119


state 94

    (68) relation -> NOT . relation
    (66) relation -> . relation OR relation
    (67) relation -> . relation AND relation
    (68) relation -> . NOT relation
    (69) relation -> . ( relation )
    (70) relation -> . expression LT expression
    (71) relation -> . expression LE expression
    (72) relation -> . expression GT expression
    (73) relation -> . expression GE expression
    (74) relation -> . expression NE expression
    (75) relation -> . expression EQUAL expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 94
    (               shift and go to state 85
    -               shift and go to state 87
    +               shift and go to state 86
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    relation                       shift and go to state 120
    functionCall                   shift and go to state 90
    expression                     shift and go to state 95

state 95

    (70) relation -> expression . LT expression
    (71) relation -> expression . LE expression
    (72) relation -> expression . GT expression
    (73) relation -> expression . GE expression
    (74) relation -> expression . NE expression
    (75) relation -> expression . EQUAL expression
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              shift and go to state 129
    LE              shift and go to state 121
    GT              shift and go to state 130
    GE              shift and go to state 126
    NE              shift and go to state 128
    EQUAL           shift and go to state 122
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 96

    (61) inOutExpr -> PRINT ( . STRING )

    STRING          shift and go to state 131


state 97

    (43) statement -> location ASIGN . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    functionCall                   shift and go to state 90
    expression                     shift and go to state 132

state 98

    (62) inOutExpr -> WRITE ( . expression )
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 133
    number                         shift and go to state 82

state 99

    (56) functionCall -> ID ( . paramslistop )
    (57) paramslistop -> . paramList
    (58) paramslistop -> . empty
    (59) paramList -> . paramList , expression
    (60) paramList -> . expression
    (92) empty -> .
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    )               reduce using rule 92 (empty -> .)
    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    paramslistop                   shift and go to state 134
    number                         shift and go to state 82
    functionCall                   shift and go to state 90
    paramList                      shift and go to state 135
    expression                     shift and go to state 136
    empty                          shift and go to state 137

state 100

    (65) location -> ID [ . expression ]
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 138
    number                         shift and go to state 82

state 101

    (52) ifthen -> IF relation . THEN statement
    (54) ifthen -> IF relation . statement
    (53) ifthenelse -> IF relation . THEN statement ELSE statement
    (55) ifthenelse -> IF relation . error statement ELSE statement
    (66) relation -> relation . OR relation
    (67) relation -> relation . AND relation
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    THEN            shift and go to state 139
    error           shift and go to state 141
    OR              shift and go to state 112
    AND             shift and go to state 110
    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 140
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 102

    (12) beginEndBlock -> BEGIN error END .

    FUN             reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    $end            reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    ;               reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    ID              reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    BEGIN           reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    error           reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    END             reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    WHILE           reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    RETURN          reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    SKIP            reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    BREAK           reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    IF              reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    PRINT           reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    WRITE           reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    READ            reduce using rule 12 (beginEndBlock -> BEGIN error END .)
    ELSE            reduce using rule 12 (beginEndBlock -> BEGIN error END .)


state 103

    (37) statementBlock -> statementBlock ; statement .

    END             reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    ;               reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    WHILE           reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    RETURN          reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    SKIP            reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    BREAK           reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    IF              reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    ID              reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    PRINT           reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    WRITE           reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    READ            reduce using rule 37 (statementBlock -> statementBlock ; statement .)
    BEGIN           reduce using rule 37 (statementBlock -> statementBlock ; statement .)


state 104

    (10) beginEndBlock -> BEGIN statementBlock ; END .

    FUN             reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    $end            reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    ;               reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    ID              reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    BEGIN           reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    error           reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    END             reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    WHILE           reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    RETURN          reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    SKIP            reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    BREAK           reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    IF              reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    PRINT           reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    WRITE           reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    READ            reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)
    ELSE            reduce using rule 10 (beginEndBlock -> BEGIN statementBlock ; END .)


state 105

    (82) expression -> ( . expression )
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 142
    number                         shift and go to state 82

state 106

    (45) statement -> RETURN ( expression . )
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    )               shift and go to state 143
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 107

    (46) statement -> RETURN ( empty . )

    )               shift and go to state 144


state 108

    (63) inOutExpr -> READ ( location . )

    )               shift and go to state 145


state 109

    (64) location -> ID .
    (65) location -> ID . [ expression ]

    )               reduce using rule 64 (location -> ID .)
    [               shift and go to state 100


state 110

    (67) relation -> relation AND . relation
    (66) relation -> . relation OR relation
    (67) relation -> . relation AND relation
    (68) relation -> . NOT relation
    (69) relation -> . ( relation )
    (70) relation -> . expression LT expression
    (71) relation -> . expression LE expression
    (72) relation -> . expression GT expression
    (73) relation -> . expression GE expression
    (74) relation -> . expression NE expression
    (75) relation -> . expression EQUAL expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 94
    (               shift and go to state 85
    -               shift and go to state 87
    +               shift and go to state 86
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    relation                       shift and go to state 146
    functionCall                   shift and go to state 90
    expression                     shift and go to state 95

state 111

    (40) statement -> WHILE relation DO . statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 147
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 112

    (66) relation -> relation OR . relation
    (66) relation -> . relation OR relation
    (67) relation -> . relation AND relation
    (68) relation -> . NOT relation
    (69) relation -> . ( relation )
    (70) relation -> . expression LT expression
    (71) relation -> . expression LE expression
    (72) relation -> . expression GT expression
    (73) relation -> . expression GE expression
    (74) relation -> . expression NE expression
    (75) relation -> . expression EQUAL expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    NOT             shift and go to state 94
    (               shift and go to state 85
    -               shift and go to state 87
    +               shift and go to state 86
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    relation                       shift and go to state 148
    functionCall                   shift and go to state 90
    expression                     shift and go to state 95

state 113

    (69) relation -> ( relation . )
    (66) relation -> relation . OR relation
    (67) relation -> relation . AND relation

    )               shift and go to state 149
    OR              shift and go to state 112
    AND             shift and go to state 110


state 114

    (82) expression -> ( expression . )
    (70) relation -> expression . LT expression
    (71) relation -> expression . LE expression
    (72) relation -> expression . GT expression
    (73) relation -> expression . GE expression
    (74) relation -> expression . NE expression
    (75) relation -> expression . EQUAL expression
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    )               shift and go to state 150
    LT              shift and go to state 129
    LE              shift and go to state 121
    GT              shift and go to state 130
    GE              shift and go to state 126
    NE              shift and go to state 128
    EQUAL           shift and go to state 122
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 115

    (81) expression -> + expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              reduce using rule 81 (expression -> + expression .)
    LE              reduce using rule 81 (expression -> + expression .)
    GT              reduce using rule 81 (expression -> + expression .)
    GE              reduce using rule 81 (expression -> + expression .)
    NE              reduce using rule 81 (expression -> + expression .)
    EQUAL           reduce using rule 81 (expression -> + expression .)
    +               reduce using rule 81 (expression -> + expression .)
    -               reduce using rule 81 (expression -> + expression .)
    *               reduce using rule 81 (expression -> + expression .)
    /               reduce using rule 81 (expression -> + expression .)
    DO              reduce using rule 81 (expression -> + expression .)
    OR              reduce using rule 81 (expression -> + expression .)
    AND             reduce using rule 81 (expression -> + expression .)
    THEN            reduce using rule 81 (expression -> + expression .)
    error           reduce using rule 81 (expression -> + expression .)
    WHILE           reduce using rule 81 (expression -> + expression .)
    RETURN          reduce using rule 81 (expression -> + expression .)
    SKIP            reduce using rule 81 (expression -> + expression .)
    BREAK           reduce using rule 81 (expression -> + expression .)
    IF              reduce using rule 81 (expression -> + expression .)
    ID              reduce using rule 81 (expression -> + expression .)
    PRINT           reduce using rule 81 (expression -> + expression .)
    WRITE           reduce using rule 81 (expression -> + expression .)
    READ            reduce using rule 81 (expression -> + expression .)
    BEGIN           reduce using rule 81 (expression -> + expression .)
    )               reduce using rule 81 (expression -> + expression .)
    ]               reduce using rule 81 (expression -> + expression .)
    END             reduce using rule 81 (expression -> + expression .)
    ;               reduce using rule 81 (expression -> + expression .)
    ELSE            reduce using rule 81 (expression -> + expression .)
    ,               reduce using rule 81 (expression -> + expression .)

  ! +               [ shift and go to state 123 ]
  ! -               [ shift and go to state 125 ]
  ! *               [ shift and go to state 124 ]
  ! /               [ shift and go to state 127 ]


state 116

    (80) expression -> - expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              reduce using rule 80 (expression -> - expression .)
    LE              reduce using rule 80 (expression -> - expression .)
    GT              reduce using rule 80 (expression -> - expression .)
    GE              reduce using rule 80 (expression -> - expression .)
    NE              reduce using rule 80 (expression -> - expression .)
    EQUAL           reduce using rule 80 (expression -> - expression .)
    +               reduce using rule 80 (expression -> - expression .)
    -               reduce using rule 80 (expression -> - expression .)
    *               reduce using rule 80 (expression -> - expression .)
    /               reduce using rule 80 (expression -> - expression .)
    DO              reduce using rule 80 (expression -> - expression .)
    OR              reduce using rule 80 (expression -> - expression .)
    AND             reduce using rule 80 (expression -> - expression .)
    THEN            reduce using rule 80 (expression -> - expression .)
    error           reduce using rule 80 (expression -> - expression .)
    WHILE           reduce using rule 80 (expression -> - expression .)
    RETURN          reduce using rule 80 (expression -> - expression .)
    SKIP            reduce using rule 80 (expression -> - expression .)
    BREAK           reduce using rule 80 (expression -> - expression .)
    IF              reduce using rule 80 (expression -> - expression .)
    ID              reduce using rule 80 (expression -> - expression .)
    PRINT           reduce using rule 80 (expression -> - expression .)
    WRITE           reduce using rule 80 (expression -> - expression .)
    READ            reduce using rule 80 (expression -> - expression .)
    BEGIN           reduce using rule 80 (expression -> - expression .)
    )               reduce using rule 80 (expression -> - expression .)
    ]               reduce using rule 80 (expression -> - expression .)
    END             reduce using rule 80 (expression -> - expression .)
    ;               reduce using rule 80 (expression -> - expression .)
    ELSE            reduce using rule 80 (expression -> - expression .)
    ,               reduce using rule 80 (expression -> - expression .)

  ! +               [ shift and go to state 123 ]
  ! -               [ shift and go to state 125 ]
  ! *               [ shift and go to state 124 ]
  ! /               [ shift and go to state 127 ]


state 117

    (85) expression -> ID [ . expression ]
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 151
    number                         shift and go to state 82

state 118

    (88) casting -> INT ( . expression )
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 152
    number                         shift and go to state 82

state 119

    (89) casting -> FLOAT ( . expression )
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 153
    number                         shift and go to state 82

state 120

    (68) relation -> NOT relation .
    (66) relation -> relation . OR relation
    (67) relation -> relation . AND relation

    OR              reduce using rule 68 (relation -> NOT relation .)
    AND             reduce using rule 68 (relation -> NOT relation .)
    DO              reduce using rule 68 (relation -> NOT relation .)
    THEN            reduce using rule 68 (relation -> NOT relation .)
    error           reduce using rule 68 (relation -> NOT relation .)
    WHILE           reduce using rule 68 (relation -> NOT relation .)
    RETURN          reduce using rule 68 (relation -> NOT relation .)
    SKIP            reduce using rule 68 (relation -> NOT relation .)
    BREAK           reduce using rule 68 (relation -> NOT relation .)
    IF              reduce using rule 68 (relation -> NOT relation .)
    ID              reduce using rule 68 (relation -> NOT relation .)
    PRINT           reduce using rule 68 (relation -> NOT relation .)
    WRITE           reduce using rule 68 (relation -> NOT relation .)
    READ            reduce using rule 68 (relation -> NOT relation .)
    BEGIN           reduce using rule 68 (relation -> NOT relation .)
    )               reduce using rule 68 (relation -> NOT relation .)

  ! OR              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 110 ]


state 121

    (71) relation -> expression LE . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 154
    number                         shift and go to state 82

state 122

    (75) relation -> expression EQUAL . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 155
    number                         shift and go to state 82

state 123

    (76) expression -> expression + . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 156
    number                         shift and go to state 82

state 124

    (78) expression -> expression * . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 157
    number                         shift and go to state 82

state 125

    (77) expression -> expression - . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 158
    number                         shift and go to state 82

state 126

    (73) relation -> expression GE . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 159
    number                         shift and go to state 82

state 127

    (79) expression -> expression / . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 160
    number                         shift and go to state 82

state 128

    (74) relation -> expression NE . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 161
    number                         shift and go to state 82

state 129

    (70) relation -> expression LT . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 162
    number                         shift and go to state 82

state 130

    (72) relation -> expression GT . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    functionCall                   shift and go to state 90
    casting                        shift and go to state 89
    expression                     shift and go to state 163
    number                         shift and go to state 82

state 131

    (61) inOutExpr -> PRINT ( STRING . )

    )               shift and go to state 164


state 132

    (43) statement -> location ASIGN expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    END             reduce using rule 43 (statement -> location ASIGN expression .)
    ;               reduce using rule 43 (statement -> location ASIGN expression .)
    WHILE           reduce using rule 43 (statement -> location ASIGN expression .)
    RETURN          reduce using rule 43 (statement -> location ASIGN expression .)
    SKIP            reduce using rule 43 (statement -> location ASIGN expression .)
    BREAK           reduce using rule 43 (statement -> location ASIGN expression .)
    IF              reduce using rule 43 (statement -> location ASIGN expression .)
    ID              reduce using rule 43 (statement -> location ASIGN expression .)
    PRINT           reduce using rule 43 (statement -> location ASIGN expression .)
    WRITE           reduce using rule 43 (statement -> location ASIGN expression .)
    READ            reduce using rule 43 (statement -> location ASIGN expression .)
    BEGIN           reduce using rule 43 (statement -> location ASIGN expression .)
    ELSE            reduce using rule 43 (statement -> location ASIGN expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 133

    (62) inOutExpr -> WRITE ( expression . )
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    )               shift and go to state 165
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 134

    (56) functionCall -> ID ( paramslistop . )

    )               shift and go to state 166


state 135

    (57) paramslistop -> paramList .
    (59) paramList -> paramList . , expression

    )               reduce using rule 57 (paramslistop -> paramList .)
    ,               shift and go to state 167


state 136

    (60) paramList -> expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    ,               reduce using rule 60 (paramList -> expression .)
    )               reduce using rule 60 (paramList -> expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 137

    (58) paramslistop -> empty .

    )               reduce using rule 58 (paramslistop -> empty .)


state 138

    (65) location -> ID [ expression . ]
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    ]               shift and go to state 168
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 139

    (52) ifthen -> IF relation THEN . statement
    (53) ifthenelse -> IF relation THEN . statement ELSE statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 169
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 140

    (54) ifthen -> IF relation statement .

    END             reduce using rule 54 (ifthen -> IF relation statement .)
    ;               reduce using rule 54 (ifthen -> IF relation statement .)
    WHILE           reduce using rule 54 (ifthen -> IF relation statement .)
    RETURN          reduce using rule 54 (ifthen -> IF relation statement .)
    SKIP            reduce using rule 54 (ifthen -> IF relation statement .)
    BREAK           reduce using rule 54 (ifthen -> IF relation statement .)
    IF              reduce using rule 54 (ifthen -> IF relation statement .)
    ID              reduce using rule 54 (ifthen -> IF relation statement .)
    PRINT           reduce using rule 54 (ifthen -> IF relation statement .)
    WRITE           reduce using rule 54 (ifthen -> IF relation statement .)
    READ            reduce using rule 54 (ifthen -> IF relation statement .)
    BEGIN           reduce using rule 54 (ifthen -> IF relation statement .)
    ELSE            reduce using rule 54 (ifthen -> IF relation statement .)


state 141

    (55) ifthenelse -> IF relation error . statement ELSE statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 170
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 142

    (82) expression -> ( expression . )
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    )               shift and go to state 150
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 143

    (45) statement -> RETURN ( expression ) .

    END             reduce using rule 45 (statement -> RETURN ( expression ) .)
    ;               reduce using rule 45 (statement -> RETURN ( expression ) .)
    WHILE           reduce using rule 45 (statement -> RETURN ( expression ) .)
    RETURN          reduce using rule 45 (statement -> RETURN ( expression ) .)
    SKIP            reduce using rule 45 (statement -> RETURN ( expression ) .)
    BREAK           reduce using rule 45 (statement -> RETURN ( expression ) .)
    IF              reduce using rule 45 (statement -> RETURN ( expression ) .)
    ID              reduce using rule 45 (statement -> RETURN ( expression ) .)
    PRINT           reduce using rule 45 (statement -> RETURN ( expression ) .)
    WRITE           reduce using rule 45 (statement -> RETURN ( expression ) .)
    READ            reduce using rule 45 (statement -> RETURN ( expression ) .)
    BEGIN           reduce using rule 45 (statement -> RETURN ( expression ) .)
    ELSE            reduce using rule 45 (statement -> RETURN ( expression ) .)


state 144

    (46) statement -> RETURN ( empty ) .

    END             reduce using rule 46 (statement -> RETURN ( empty ) .)
    ;               reduce using rule 46 (statement -> RETURN ( empty ) .)
    WHILE           reduce using rule 46 (statement -> RETURN ( empty ) .)
    RETURN          reduce using rule 46 (statement -> RETURN ( empty ) .)
    SKIP            reduce using rule 46 (statement -> RETURN ( empty ) .)
    BREAK           reduce using rule 46 (statement -> RETURN ( empty ) .)
    IF              reduce using rule 46 (statement -> RETURN ( empty ) .)
    ID              reduce using rule 46 (statement -> RETURN ( empty ) .)
    PRINT           reduce using rule 46 (statement -> RETURN ( empty ) .)
    WRITE           reduce using rule 46 (statement -> RETURN ( empty ) .)
    READ            reduce using rule 46 (statement -> RETURN ( empty ) .)
    BEGIN           reduce using rule 46 (statement -> RETURN ( empty ) .)
    ELSE            reduce using rule 46 (statement -> RETURN ( empty ) .)


state 145

    (63) inOutExpr -> READ ( location ) .

    END             reduce using rule 63 (inOutExpr -> READ ( location ) .)
    ;               reduce using rule 63 (inOutExpr -> READ ( location ) .)
    WHILE           reduce using rule 63 (inOutExpr -> READ ( location ) .)
    RETURN          reduce using rule 63 (inOutExpr -> READ ( location ) .)
    SKIP            reduce using rule 63 (inOutExpr -> READ ( location ) .)
    BREAK           reduce using rule 63 (inOutExpr -> READ ( location ) .)
    IF              reduce using rule 63 (inOutExpr -> READ ( location ) .)
    ID              reduce using rule 63 (inOutExpr -> READ ( location ) .)
    PRINT           reduce using rule 63 (inOutExpr -> READ ( location ) .)
    WRITE           reduce using rule 63 (inOutExpr -> READ ( location ) .)
    READ            reduce using rule 63 (inOutExpr -> READ ( location ) .)
    BEGIN           reduce using rule 63 (inOutExpr -> READ ( location ) .)
    ELSE            reduce using rule 63 (inOutExpr -> READ ( location ) .)


state 146

    (67) relation -> relation AND relation .
    (66) relation -> relation . OR relation
    (67) relation -> relation . AND relation

    OR              reduce using rule 67 (relation -> relation AND relation .)
    AND             reduce using rule 67 (relation -> relation AND relation .)
    DO              reduce using rule 67 (relation -> relation AND relation .)
    THEN            reduce using rule 67 (relation -> relation AND relation .)
    error           reduce using rule 67 (relation -> relation AND relation .)
    WHILE           reduce using rule 67 (relation -> relation AND relation .)
    RETURN          reduce using rule 67 (relation -> relation AND relation .)
    SKIP            reduce using rule 67 (relation -> relation AND relation .)
    BREAK           reduce using rule 67 (relation -> relation AND relation .)
    IF              reduce using rule 67 (relation -> relation AND relation .)
    ID              reduce using rule 67 (relation -> relation AND relation .)
    PRINT           reduce using rule 67 (relation -> relation AND relation .)
    WRITE           reduce using rule 67 (relation -> relation AND relation .)
    READ            reduce using rule 67 (relation -> relation AND relation .)
    BEGIN           reduce using rule 67 (relation -> relation AND relation .)
    )               reduce using rule 67 (relation -> relation AND relation .)

  ! OR              [ shift and go to state 112 ]
  ! AND             [ shift and go to state 110 ]


state 147

    (40) statement -> WHILE relation DO statement .

    END             reduce using rule 40 (statement -> WHILE relation DO statement .)
    ;               reduce using rule 40 (statement -> WHILE relation DO statement .)
    WHILE           reduce using rule 40 (statement -> WHILE relation DO statement .)
    RETURN          reduce using rule 40 (statement -> WHILE relation DO statement .)
    SKIP            reduce using rule 40 (statement -> WHILE relation DO statement .)
    BREAK           reduce using rule 40 (statement -> WHILE relation DO statement .)
    IF              reduce using rule 40 (statement -> WHILE relation DO statement .)
    ID              reduce using rule 40 (statement -> WHILE relation DO statement .)
    PRINT           reduce using rule 40 (statement -> WHILE relation DO statement .)
    WRITE           reduce using rule 40 (statement -> WHILE relation DO statement .)
    READ            reduce using rule 40 (statement -> WHILE relation DO statement .)
    BEGIN           reduce using rule 40 (statement -> WHILE relation DO statement .)
    ELSE            reduce using rule 40 (statement -> WHILE relation DO statement .)


state 148

    (66) relation -> relation OR relation .
    (66) relation -> relation . OR relation
    (67) relation -> relation . AND relation

    OR              reduce using rule 66 (relation -> relation OR relation .)
    DO              reduce using rule 66 (relation -> relation OR relation .)
    THEN            reduce using rule 66 (relation -> relation OR relation .)
    error           reduce using rule 66 (relation -> relation OR relation .)
    WHILE           reduce using rule 66 (relation -> relation OR relation .)
    RETURN          reduce using rule 66 (relation -> relation OR relation .)
    SKIP            reduce using rule 66 (relation -> relation OR relation .)
    BREAK           reduce using rule 66 (relation -> relation OR relation .)
    IF              reduce using rule 66 (relation -> relation OR relation .)
    ID              reduce using rule 66 (relation -> relation OR relation .)
    PRINT           reduce using rule 66 (relation -> relation OR relation .)
    WRITE           reduce using rule 66 (relation -> relation OR relation .)
    READ            reduce using rule 66 (relation -> relation OR relation .)
    BEGIN           reduce using rule 66 (relation -> relation OR relation .)
    )               reduce using rule 66 (relation -> relation OR relation .)
    AND             shift and go to state 110

  ! AND             [ reduce using rule 66 (relation -> relation OR relation .) ]
  ! OR              [ shift and go to state 112 ]


state 149

    (69) relation -> ( relation ) .

    OR              reduce using rule 69 (relation -> ( relation ) .)
    AND             reduce using rule 69 (relation -> ( relation ) .)
    DO              reduce using rule 69 (relation -> ( relation ) .)
    THEN            reduce using rule 69 (relation -> ( relation ) .)
    error           reduce using rule 69 (relation -> ( relation ) .)
    WHILE           reduce using rule 69 (relation -> ( relation ) .)
    RETURN          reduce using rule 69 (relation -> ( relation ) .)
    SKIP            reduce using rule 69 (relation -> ( relation ) .)
    BREAK           reduce using rule 69 (relation -> ( relation ) .)
    IF              reduce using rule 69 (relation -> ( relation ) .)
    ID              reduce using rule 69 (relation -> ( relation ) .)
    PRINT           reduce using rule 69 (relation -> ( relation ) .)
    WRITE           reduce using rule 69 (relation -> ( relation ) .)
    READ            reduce using rule 69 (relation -> ( relation ) .)
    BEGIN           reduce using rule 69 (relation -> ( relation ) .)
    )               reduce using rule 69 (relation -> ( relation ) .)


state 150

    (82) expression -> ( expression ) .

    LT              reduce using rule 82 (expression -> ( expression ) .)
    LE              reduce using rule 82 (expression -> ( expression ) .)
    GT              reduce using rule 82 (expression -> ( expression ) .)
    GE              reduce using rule 82 (expression -> ( expression ) .)
    NE              reduce using rule 82 (expression -> ( expression ) .)
    EQUAL           reduce using rule 82 (expression -> ( expression ) .)
    +               reduce using rule 82 (expression -> ( expression ) .)
    -               reduce using rule 82 (expression -> ( expression ) .)
    *               reduce using rule 82 (expression -> ( expression ) .)
    /               reduce using rule 82 (expression -> ( expression ) .)
    DO              reduce using rule 82 (expression -> ( expression ) .)
    OR              reduce using rule 82 (expression -> ( expression ) .)
    AND             reduce using rule 82 (expression -> ( expression ) .)
    THEN            reduce using rule 82 (expression -> ( expression ) .)
    error           reduce using rule 82 (expression -> ( expression ) .)
    WHILE           reduce using rule 82 (expression -> ( expression ) .)
    RETURN          reduce using rule 82 (expression -> ( expression ) .)
    SKIP            reduce using rule 82 (expression -> ( expression ) .)
    BREAK           reduce using rule 82 (expression -> ( expression ) .)
    IF              reduce using rule 82 (expression -> ( expression ) .)
    ID              reduce using rule 82 (expression -> ( expression ) .)
    PRINT           reduce using rule 82 (expression -> ( expression ) .)
    WRITE           reduce using rule 82 (expression -> ( expression ) .)
    READ            reduce using rule 82 (expression -> ( expression ) .)
    BEGIN           reduce using rule 82 (expression -> ( expression ) .)
    )               reduce using rule 82 (expression -> ( expression ) .)
    ]               reduce using rule 82 (expression -> ( expression ) .)
    END             reduce using rule 82 (expression -> ( expression ) .)
    ;               reduce using rule 82 (expression -> ( expression ) .)
    ELSE            reduce using rule 82 (expression -> ( expression ) .)
    ,               reduce using rule 82 (expression -> ( expression ) .)


state 151

    (85) expression -> ID [ expression . ]
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    ]               shift and go to state 171
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 152

    (88) casting -> INT ( expression . )
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    )               shift and go to state 172
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 153

    (89) casting -> FLOAT ( expression . )
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    )               shift and go to state 173
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 154

    (71) relation -> expression LE expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    OR              reduce using rule 71 (relation -> expression LE expression .)
    AND             reduce using rule 71 (relation -> expression LE expression .)
    DO              reduce using rule 71 (relation -> expression LE expression .)
    THEN            reduce using rule 71 (relation -> expression LE expression .)
    error           reduce using rule 71 (relation -> expression LE expression .)
    WHILE           reduce using rule 71 (relation -> expression LE expression .)
    RETURN          reduce using rule 71 (relation -> expression LE expression .)
    SKIP            reduce using rule 71 (relation -> expression LE expression .)
    BREAK           reduce using rule 71 (relation -> expression LE expression .)
    IF              reduce using rule 71 (relation -> expression LE expression .)
    ID              reduce using rule 71 (relation -> expression LE expression .)
    PRINT           reduce using rule 71 (relation -> expression LE expression .)
    WRITE           reduce using rule 71 (relation -> expression LE expression .)
    READ            reduce using rule 71 (relation -> expression LE expression .)
    BEGIN           reduce using rule 71 (relation -> expression LE expression .)
    )               reduce using rule 71 (relation -> expression LE expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 155

    (75) relation -> expression EQUAL expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    OR              reduce using rule 75 (relation -> expression EQUAL expression .)
    AND             reduce using rule 75 (relation -> expression EQUAL expression .)
    DO              reduce using rule 75 (relation -> expression EQUAL expression .)
    THEN            reduce using rule 75 (relation -> expression EQUAL expression .)
    error           reduce using rule 75 (relation -> expression EQUAL expression .)
    WHILE           reduce using rule 75 (relation -> expression EQUAL expression .)
    RETURN          reduce using rule 75 (relation -> expression EQUAL expression .)
    SKIP            reduce using rule 75 (relation -> expression EQUAL expression .)
    BREAK           reduce using rule 75 (relation -> expression EQUAL expression .)
    IF              reduce using rule 75 (relation -> expression EQUAL expression .)
    ID              reduce using rule 75 (relation -> expression EQUAL expression .)
    PRINT           reduce using rule 75 (relation -> expression EQUAL expression .)
    WRITE           reduce using rule 75 (relation -> expression EQUAL expression .)
    READ            reduce using rule 75 (relation -> expression EQUAL expression .)
    BEGIN           reduce using rule 75 (relation -> expression EQUAL expression .)
    )               reduce using rule 75 (relation -> expression EQUAL expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 156

    (76) expression -> expression + expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              reduce using rule 76 (expression -> expression + expression .)
    LE              reduce using rule 76 (expression -> expression + expression .)
    GT              reduce using rule 76 (expression -> expression + expression .)
    GE              reduce using rule 76 (expression -> expression + expression .)
    NE              reduce using rule 76 (expression -> expression + expression .)
    EQUAL           reduce using rule 76 (expression -> expression + expression .)
    +               reduce using rule 76 (expression -> expression + expression .)
    -               reduce using rule 76 (expression -> expression + expression .)
    DO              reduce using rule 76 (expression -> expression + expression .)
    OR              reduce using rule 76 (expression -> expression + expression .)
    AND             reduce using rule 76 (expression -> expression + expression .)
    THEN            reduce using rule 76 (expression -> expression + expression .)
    error           reduce using rule 76 (expression -> expression + expression .)
    WHILE           reduce using rule 76 (expression -> expression + expression .)
    RETURN          reduce using rule 76 (expression -> expression + expression .)
    SKIP            reduce using rule 76 (expression -> expression + expression .)
    BREAK           reduce using rule 76 (expression -> expression + expression .)
    IF              reduce using rule 76 (expression -> expression + expression .)
    ID              reduce using rule 76 (expression -> expression + expression .)
    PRINT           reduce using rule 76 (expression -> expression + expression .)
    WRITE           reduce using rule 76 (expression -> expression + expression .)
    READ            reduce using rule 76 (expression -> expression + expression .)
    BEGIN           reduce using rule 76 (expression -> expression + expression .)
    )               reduce using rule 76 (expression -> expression + expression .)
    ]               reduce using rule 76 (expression -> expression + expression .)
    END             reduce using rule 76 (expression -> expression + expression .)
    ;               reduce using rule 76 (expression -> expression + expression .)
    ELSE            reduce using rule 76 (expression -> expression + expression .)
    ,               reduce using rule 76 (expression -> expression + expression .)
    *               shift and go to state 124
    /               shift and go to state 127

  ! *               [ reduce using rule 76 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 76 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 123 ]
  ! -               [ shift and go to state 125 ]


state 157

    (78) expression -> expression * expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              reduce using rule 78 (expression -> expression * expression .)
    LE              reduce using rule 78 (expression -> expression * expression .)
    GT              reduce using rule 78 (expression -> expression * expression .)
    GE              reduce using rule 78 (expression -> expression * expression .)
    NE              reduce using rule 78 (expression -> expression * expression .)
    EQUAL           reduce using rule 78 (expression -> expression * expression .)
    +               reduce using rule 78 (expression -> expression * expression .)
    -               reduce using rule 78 (expression -> expression * expression .)
    *               reduce using rule 78 (expression -> expression * expression .)
    /               reduce using rule 78 (expression -> expression * expression .)
    DO              reduce using rule 78 (expression -> expression * expression .)
    OR              reduce using rule 78 (expression -> expression * expression .)
    AND             reduce using rule 78 (expression -> expression * expression .)
    THEN            reduce using rule 78 (expression -> expression * expression .)
    error           reduce using rule 78 (expression -> expression * expression .)
    WHILE           reduce using rule 78 (expression -> expression * expression .)
    RETURN          reduce using rule 78 (expression -> expression * expression .)
    SKIP            reduce using rule 78 (expression -> expression * expression .)
    BREAK           reduce using rule 78 (expression -> expression * expression .)
    IF              reduce using rule 78 (expression -> expression * expression .)
    ID              reduce using rule 78 (expression -> expression * expression .)
    PRINT           reduce using rule 78 (expression -> expression * expression .)
    WRITE           reduce using rule 78 (expression -> expression * expression .)
    READ            reduce using rule 78 (expression -> expression * expression .)
    BEGIN           reduce using rule 78 (expression -> expression * expression .)
    )               reduce using rule 78 (expression -> expression * expression .)
    ]               reduce using rule 78 (expression -> expression * expression .)
    END             reduce using rule 78 (expression -> expression * expression .)
    ;               reduce using rule 78 (expression -> expression * expression .)
    ELSE            reduce using rule 78 (expression -> expression * expression .)
    ,               reduce using rule 78 (expression -> expression * expression .)

  ! +               [ shift and go to state 123 ]
  ! -               [ shift and go to state 125 ]
  ! *               [ shift and go to state 124 ]
  ! /               [ shift and go to state 127 ]


state 158

    (77) expression -> expression - expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              reduce using rule 77 (expression -> expression - expression .)
    LE              reduce using rule 77 (expression -> expression - expression .)
    GT              reduce using rule 77 (expression -> expression - expression .)
    GE              reduce using rule 77 (expression -> expression - expression .)
    NE              reduce using rule 77 (expression -> expression - expression .)
    EQUAL           reduce using rule 77 (expression -> expression - expression .)
    +               reduce using rule 77 (expression -> expression - expression .)
    -               reduce using rule 77 (expression -> expression - expression .)
    DO              reduce using rule 77 (expression -> expression - expression .)
    OR              reduce using rule 77 (expression -> expression - expression .)
    AND             reduce using rule 77 (expression -> expression - expression .)
    THEN            reduce using rule 77 (expression -> expression - expression .)
    error           reduce using rule 77 (expression -> expression - expression .)
    WHILE           reduce using rule 77 (expression -> expression - expression .)
    RETURN          reduce using rule 77 (expression -> expression - expression .)
    SKIP            reduce using rule 77 (expression -> expression - expression .)
    BREAK           reduce using rule 77 (expression -> expression - expression .)
    IF              reduce using rule 77 (expression -> expression - expression .)
    ID              reduce using rule 77 (expression -> expression - expression .)
    PRINT           reduce using rule 77 (expression -> expression - expression .)
    WRITE           reduce using rule 77 (expression -> expression - expression .)
    READ            reduce using rule 77 (expression -> expression - expression .)
    BEGIN           reduce using rule 77 (expression -> expression - expression .)
    )               reduce using rule 77 (expression -> expression - expression .)
    ]               reduce using rule 77 (expression -> expression - expression .)
    END             reduce using rule 77 (expression -> expression - expression .)
    ;               reduce using rule 77 (expression -> expression - expression .)
    ELSE            reduce using rule 77 (expression -> expression - expression .)
    ,               reduce using rule 77 (expression -> expression - expression .)
    *               shift and go to state 124
    /               shift and go to state 127

  ! *               [ reduce using rule 77 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 77 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 123 ]
  ! -               [ shift and go to state 125 ]


state 159

    (73) relation -> expression GE expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    OR              reduce using rule 73 (relation -> expression GE expression .)
    AND             reduce using rule 73 (relation -> expression GE expression .)
    DO              reduce using rule 73 (relation -> expression GE expression .)
    THEN            reduce using rule 73 (relation -> expression GE expression .)
    error           reduce using rule 73 (relation -> expression GE expression .)
    WHILE           reduce using rule 73 (relation -> expression GE expression .)
    RETURN          reduce using rule 73 (relation -> expression GE expression .)
    SKIP            reduce using rule 73 (relation -> expression GE expression .)
    BREAK           reduce using rule 73 (relation -> expression GE expression .)
    IF              reduce using rule 73 (relation -> expression GE expression .)
    ID              reduce using rule 73 (relation -> expression GE expression .)
    PRINT           reduce using rule 73 (relation -> expression GE expression .)
    WRITE           reduce using rule 73 (relation -> expression GE expression .)
    READ            reduce using rule 73 (relation -> expression GE expression .)
    BEGIN           reduce using rule 73 (relation -> expression GE expression .)
    )               reduce using rule 73 (relation -> expression GE expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 160

    (79) expression -> expression / expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    LT              reduce using rule 79 (expression -> expression / expression .)
    LE              reduce using rule 79 (expression -> expression / expression .)
    GT              reduce using rule 79 (expression -> expression / expression .)
    GE              reduce using rule 79 (expression -> expression / expression .)
    NE              reduce using rule 79 (expression -> expression / expression .)
    EQUAL           reduce using rule 79 (expression -> expression / expression .)
    +               reduce using rule 79 (expression -> expression / expression .)
    -               reduce using rule 79 (expression -> expression / expression .)
    *               reduce using rule 79 (expression -> expression / expression .)
    /               reduce using rule 79 (expression -> expression / expression .)
    DO              reduce using rule 79 (expression -> expression / expression .)
    OR              reduce using rule 79 (expression -> expression / expression .)
    AND             reduce using rule 79 (expression -> expression / expression .)
    THEN            reduce using rule 79 (expression -> expression / expression .)
    error           reduce using rule 79 (expression -> expression / expression .)
    WHILE           reduce using rule 79 (expression -> expression / expression .)
    RETURN          reduce using rule 79 (expression -> expression / expression .)
    SKIP            reduce using rule 79 (expression -> expression / expression .)
    BREAK           reduce using rule 79 (expression -> expression / expression .)
    IF              reduce using rule 79 (expression -> expression / expression .)
    ID              reduce using rule 79 (expression -> expression / expression .)
    PRINT           reduce using rule 79 (expression -> expression / expression .)
    WRITE           reduce using rule 79 (expression -> expression / expression .)
    READ            reduce using rule 79 (expression -> expression / expression .)
    BEGIN           reduce using rule 79 (expression -> expression / expression .)
    )               reduce using rule 79 (expression -> expression / expression .)
    ]               reduce using rule 79 (expression -> expression / expression .)
    END             reduce using rule 79 (expression -> expression / expression .)
    ;               reduce using rule 79 (expression -> expression / expression .)
    ELSE            reduce using rule 79 (expression -> expression / expression .)
    ,               reduce using rule 79 (expression -> expression / expression .)

  ! +               [ shift and go to state 123 ]
  ! -               [ shift and go to state 125 ]
  ! *               [ shift and go to state 124 ]
  ! /               [ shift and go to state 127 ]


state 161

    (74) relation -> expression NE expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    OR              reduce using rule 74 (relation -> expression NE expression .)
    AND             reduce using rule 74 (relation -> expression NE expression .)
    DO              reduce using rule 74 (relation -> expression NE expression .)
    THEN            reduce using rule 74 (relation -> expression NE expression .)
    error           reduce using rule 74 (relation -> expression NE expression .)
    WHILE           reduce using rule 74 (relation -> expression NE expression .)
    RETURN          reduce using rule 74 (relation -> expression NE expression .)
    SKIP            reduce using rule 74 (relation -> expression NE expression .)
    BREAK           reduce using rule 74 (relation -> expression NE expression .)
    IF              reduce using rule 74 (relation -> expression NE expression .)
    ID              reduce using rule 74 (relation -> expression NE expression .)
    PRINT           reduce using rule 74 (relation -> expression NE expression .)
    WRITE           reduce using rule 74 (relation -> expression NE expression .)
    READ            reduce using rule 74 (relation -> expression NE expression .)
    BEGIN           reduce using rule 74 (relation -> expression NE expression .)
    )               reduce using rule 74 (relation -> expression NE expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 162

    (70) relation -> expression LT expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    OR              reduce using rule 70 (relation -> expression LT expression .)
    AND             reduce using rule 70 (relation -> expression LT expression .)
    DO              reduce using rule 70 (relation -> expression LT expression .)
    THEN            reduce using rule 70 (relation -> expression LT expression .)
    error           reduce using rule 70 (relation -> expression LT expression .)
    WHILE           reduce using rule 70 (relation -> expression LT expression .)
    RETURN          reduce using rule 70 (relation -> expression LT expression .)
    SKIP            reduce using rule 70 (relation -> expression LT expression .)
    BREAK           reduce using rule 70 (relation -> expression LT expression .)
    IF              reduce using rule 70 (relation -> expression LT expression .)
    ID              reduce using rule 70 (relation -> expression LT expression .)
    PRINT           reduce using rule 70 (relation -> expression LT expression .)
    WRITE           reduce using rule 70 (relation -> expression LT expression .)
    READ            reduce using rule 70 (relation -> expression LT expression .)
    BEGIN           reduce using rule 70 (relation -> expression LT expression .)
    )               reduce using rule 70 (relation -> expression LT expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 163

    (72) relation -> expression GT expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    OR              reduce using rule 72 (relation -> expression GT expression .)
    AND             reduce using rule 72 (relation -> expression GT expression .)
    DO              reduce using rule 72 (relation -> expression GT expression .)
    THEN            reduce using rule 72 (relation -> expression GT expression .)
    error           reduce using rule 72 (relation -> expression GT expression .)
    WHILE           reduce using rule 72 (relation -> expression GT expression .)
    RETURN          reduce using rule 72 (relation -> expression GT expression .)
    SKIP            reduce using rule 72 (relation -> expression GT expression .)
    BREAK           reduce using rule 72 (relation -> expression GT expression .)
    IF              reduce using rule 72 (relation -> expression GT expression .)
    ID              reduce using rule 72 (relation -> expression GT expression .)
    PRINT           reduce using rule 72 (relation -> expression GT expression .)
    WRITE           reduce using rule 72 (relation -> expression GT expression .)
    READ            reduce using rule 72 (relation -> expression GT expression .)
    BEGIN           reduce using rule 72 (relation -> expression GT expression .)
    )               reduce using rule 72 (relation -> expression GT expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 164

    (61) inOutExpr -> PRINT ( STRING ) .

    END             reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    ;               reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    WHILE           reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    RETURN          reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    SKIP            reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    BREAK           reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    IF              reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    ID              reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    PRINT           reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    WRITE           reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    READ            reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    BEGIN           reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)
    ELSE            reduce using rule 61 (inOutExpr -> PRINT ( STRING ) .)


state 165

    (62) inOutExpr -> WRITE ( expression ) .

    END             reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    ;               reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    WHILE           reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    RETURN          reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    SKIP            reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    BREAK           reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    IF              reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    ID              reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    PRINT           reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    WRITE           reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    READ            reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    BEGIN           reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)
    ELSE            reduce using rule 62 (inOutExpr -> WRITE ( expression ) .)


state 166

    (56) functionCall -> ID ( paramslistop ) .

    END             reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    ;               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    WHILE           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    RETURN          reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    SKIP            reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    BREAK           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    IF              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    ID              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    PRINT           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    WRITE           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    READ            reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    BEGIN           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    ELSE            reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    )               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    LT              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    LE              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    GT              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    GE              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    NE              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    EQUAL           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    +               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    -               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    *               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    /               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    ]               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    DO              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    OR              reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    AND             reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    THEN            reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    error           reduce using rule 56 (functionCall -> ID ( paramslistop ) .)
    ,               reduce using rule 56 (functionCall -> ID ( paramslistop ) .)


state 167

    (59) paramList -> paramList , . expression
    (76) expression -> . expression + expression
    (77) expression -> . expression - expression
    (78) expression -> . expression * expression
    (79) expression -> . expression / expression
    (80) expression -> . - expression
    (81) expression -> . + expression
    (82) expression -> . ( expression )
    (83) expression -> . ID
    (84) expression -> . number
    (85) expression -> . ID [ expression ]
    (86) expression -> . casting
    (87) expression -> . functionCall
    (90) number -> . INTEGER
    (91) number -> . FLOATNUM
    (88) casting -> . INT ( expression )
    (89) casting -> . FLOAT ( expression )
    (56) functionCall -> . ID ( paramslistop )

    -               shift and go to state 87
    +               shift and go to state 86
    (               shift and go to state 105
    ID              shift and go to state 91
    INTEGER         shift and go to state 88
    FLOATNUM        shift and go to state 83
    INT             shift and go to state 92
    FLOAT           shift and go to state 93

    casting                        shift and go to state 89
    number                         shift and go to state 82
    functionCall                   shift and go to state 90
    expression                     shift and go to state 174

state 168

    (65) location -> ID [ expression ] .

    )               reduce using rule 65 (location -> ID [ expression ] .)
    ASIGN           reduce using rule 65 (location -> ID [ expression ] .)


state 169

    (52) ifthen -> IF relation THEN statement .
    (53) ifthenelse -> IF relation THEN statement . ELSE statement

    END             reduce using rule 52 (ifthen -> IF relation THEN statement .)
    ;               reduce using rule 52 (ifthen -> IF relation THEN statement .)
    WHILE           reduce using rule 52 (ifthen -> IF relation THEN statement .)
    RETURN          reduce using rule 52 (ifthen -> IF relation THEN statement .)
    SKIP            reduce using rule 52 (ifthen -> IF relation THEN statement .)
    BREAK           reduce using rule 52 (ifthen -> IF relation THEN statement .)
    IF              reduce using rule 52 (ifthen -> IF relation THEN statement .)
    ID              reduce using rule 52 (ifthen -> IF relation THEN statement .)
    PRINT           reduce using rule 52 (ifthen -> IF relation THEN statement .)
    WRITE           reduce using rule 52 (ifthen -> IF relation THEN statement .)
    READ            reduce using rule 52 (ifthen -> IF relation THEN statement .)
    BEGIN           reduce using rule 52 (ifthen -> IF relation THEN statement .)
    ELSE            shift and go to state 175

  ! ELSE            [ reduce using rule 52 (ifthen -> IF relation THEN statement .) ]


state 170

    (55) ifthenelse -> IF relation error statement . ELSE statement

    ELSE            shift and go to state 176


state 171

    (85) expression -> ID [ expression ] .

    LT              reduce using rule 85 (expression -> ID [ expression ] .)
    LE              reduce using rule 85 (expression -> ID [ expression ] .)
    GT              reduce using rule 85 (expression -> ID [ expression ] .)
    GE              reduce using rule 85 (expression -> ID [ expression ] .)
    NE              reduce using rule 85 (expression -> ID [ expression ] .)
    EQUAL           reduce using rule 85 (expression -> ID [ expression ] .)
    +               reduce using rule 85 (expression -> ID [ expression ] .)
    -               reduce using rule 85 (expression -> ID [ expression ] .)
    *               reduce using rule 85 (expression -> ID [ expression ] .)
    /               reduce using rule 85 (expression -> ID [ expression ] .)
    DO              reduce using rule 85 (expression -> ID [ expression ] .)
    OR              reduce using rule 85 (expression -> ID [ expression ] .)
    AND             reduce using rule 85 (expression -> ID [ expression ] .)
    THEN            reduce using rule 85 (expression -> ID [ expression ] .)
    error           reduce using rule 85 (expression -> ID [ expression ] .)
    WHILE           reduce using rule 85 (expression -> ID [ expression ] .)
    RETURN          reduce using rule 85 (expression -> ID [ expression ] .)
    SKIP            reduce using rule 85 (expression -> ID [ expression ] .)
    BREAK           reduce using rule 85 (expression -> ID [ expression ] .)
    IF              reduce using rule 85 (expression -> ID [ expression ] .)
    ID              reduce using rule 85 (expression -> ID [ expression ] .)
    PRINT           reduce using rule 85 (expression -> ID [ expression ] .)
    WRITE           reduce using rule 85 (expression -> ID [ expression ] .)
    READ            reduce using rule 85 (expression -> ID [ expression ] .)
    BEGIN           reduce using rule 85 (expression -> ID [ expression ] .)
    )               reduce using rule 85 (expression -> ID [ expression ] .)
    ]               reduce using rule 85 (expression -> ID [ expression ] .)
    END             reduce using rule 85 (expression -> ID [ expression ] .)
    ;               reduce using rule 85 (expression -> ID [ expression ] .)
    ELSE            reduce using rule 85 (expression -> ID [ expression ] .)
    ,               reduce using rule 85 (expression -> ID [ expression ] .)


state 172

    (88) casting -> INT ( expression ) .

    +               reduce using rule 88 (casting -> INT ( expression ) .)
    -               reduce using rule 88 (casting -> INT ( expression ) .)
    *               reduce using rule 88 (casting -> INT ( expression ) .)
    /               reduce using rule 88 (casting -> INT ( expression ) .)
    DO              reduce using rule 88 (casting -> INT ( expression ) .)
    OR              reduce using rule 88 (casting -> INT ( expression ) .)
    AND             reduce using rule 88 (casting -> INT ( expression ) .)
    THEN            reduce using rule 88 (casting -> INT ( expression ) .)
    error           reduce using rule 88 (casting -> INT ( expression ) .)
    WHILE           reduce using rule 88 (casting -> INT ( expression ) .)
    RETURN          reduce using rule 88 (casting -> INT ( expression ) .)
    SKIP            reduce using rule 88 (casting -> INT ( expression ) .)
    BREAK           reduce using rule 88 (casting -> INT ( expression ) .)
    IF              reduce using rule 88 (casting -> INT ( expression ) .)
    ID              reduce using rule 88 (casting -> INT ( expression ) .)
    PRINT           reduce using rule 88 (casting -> INT ( expression ) .)
    WRITE           reduce using rule 88 (casting -> INT ( expression ) .)
    READ            reduce using rule 88 (casting -> INT ( expression ) .)
    BEGIN           reduce using rule 88 (casting -> INT ( expression ) .)
    )               reduce using rule 88 (casting -> INT ( expression ) .)
    ,               reduce using rule 88 (casting -> INT ( expression ) .)
    LT              reduce using rule 88 (casting -> INT ( expression ) .)
    LE              reduce using rule 88 (casting -> INT ( expression ) .)
    GT              reduce using rule 88 (casting -> INT ( expression ) .)
    GE              reduce using rule 88 (casting -> INT ( expression ) .)
    NE              reduce using rule 88 (casting -> INT ( expression ) .)
    EQUAL           reduce using rule 88 (casting -> INT ( expression ) .)
    END             reduce using rule 88 (casting -> INT ( expression ) .)
    ;               reduce using rule 88 (casting -> INT ( expression ) .)
    ELSE            reduce using rule 88 (casting -> INT ( expression ) .)
    ]               reduce using rule 88 (casting -> INT ( expression ) .)


state 173

    (89) casting -> FLOAT ( expression ) .

    +               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    -               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    *               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    /               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    DO              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    OR              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    AND             reduce using rule 89 (casting -> FLOAT ( expression ) .)
    THEN            reduce using rule 89 (casting -> FLOAT ( expression ) .)
    error           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    WHILE           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    RETURN          reduce using rule 89 (casting -> FLOAT ( expression ) .)
    SKIP            reduce using rule 89 (casting -> FLOAT ( expression ) .)
    BREAK           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    IF              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    ID              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    PRINT           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    WRITE           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    READ            reduce using rule 89 (casting -> FLOAT ( expression ) .)
    BEGIN           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    )               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    ,               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    LT              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    LE              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    GT              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    GE              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    NE              reduce using rule 89 (casting -> FLOAT ( expression ) .)
    EQUAL           reduce using rule 89 (casting -> FLOAT ( expression ) .)
    END             reduce using rule 89 (casting -> FLOAT ( expression ) .)
    ;               reduce using rule 89 (casting -> FLOAT ( expression ) .)
    ELSE            reduce using rule 89 (casting -> FLOAT ( expression ) .)
    ]               reduce using rule 89 (casting -> FLOAT ( expression ) .)


state 174

    (59) paramList -> paramList , expression .
    (76) expression -> expression . + expression
    (77) expression -> expression . - expression
    (78) expression -> expression . * expression
    (79) expression -> expression . / expression

    ,               reduce using rule 59 (paramList -> paramList , expression .)
    )               reduce using rule 59 (paramList -> paramList , expression .)
    +               shift and go to state 123
    -               shift and go to state 125
    *               shift and go to state 124
    /               shift and go to state 127


state 175

    (53) ifthenelse -> IF relation THEN statement ELSE . statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 177
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 176

    (55) ifthenelse -> IF relation error statement ELSE . statement
    (40) statement -> . WHILE relation DO statement
    (41) statement -> . ifthen
    (42) statement -> . ifthenelse
    (43) statement -> . location ASIGN expression
    (44) statement -> . inOutExpr
    (45) statement -> . RETURN ( expression )
    (46) statement -> . RETURN ( empty )
    (47) statement -> . RETURN error
    (48) statement -> . functionCall
    (49) statement -> . SKIP
    (50) statement -> . BREAK
    (51) statement -> . beginEndBlock
    (52) ifthen -> . IF relation THEN statement
    (54) ifthen -> . IF relation statement
    (53) ifthenelse -> . IF relation THEN statement ELSE statement
    (55) ifthenelse -> . IF relation error statement ELSE statement
    (64) location -> . ID
    (65) location -> . ID [ expression ]
    (61) inOutExpr -> . PRINT ( STRING )
    (62) inOutExpr -> . WRITE ( expression )
    (63) inOutExpr -> . READ ( location )
    (56) functionCall -> . ID ( paramslistop )
    (9) beginEndBlock -> . BEGIN statementBlock END
    (10) beginEndBlock -> . BEGIN statementBlock ; END
    (11) beginEndBlock -> . BEGIN END
    (12) beginEndBlock -> . BEGIN error END

    WHILE           shift and go to state 56
    RETURN          shift and go to state 53
    SKIP            shift and go to state 63
    BREAK           shift and go to state 68
    IF              shift and go to state 67
    ID              shift and go to state 66
    PRINT           shift and go to state 57
    WRITE           shift and go to state 64
    READ            shift and go to state 54
    BEGIN           shift and go to state 42

    ifthenelse                     shift and go to state 62
    inOutExpr                      shift and go to state 55
    location                       shift and go to state 59
    statement                      shift and go to state 178
    beginEndBlock                  shift and go to state 70
    functionCall                   shift and go to state 65
    ifthen                         shift and go to state 58

state 177

    (53) ifthenelse -> IF relation THEN statement ELSE statement .

    ELSE            reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    END             reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    ;               reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    WHILE           reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    RETURN          reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    SKIP            reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    BREAK           reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    IF              reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    ID              reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    PRINT           reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    WRITE           reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    READ            reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)
    BEGIN           reduce using rule 53 (ifthenelse -> IF relation THEN statement ELSE statement .)


state 178

    (55) ifthenelse -> IF relation error statement ELSE statement .

    ELSE            reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    END             reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    ;               reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    WHILE           reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    RETURN          reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    SKIP            reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    BREAK           reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    IF              reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    ID              reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    PRINT           reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    WRITE           reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    READ            reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)
    BEGIN           reduce using rule 55 (ifthenelse -> IF relation error statement ELSE statement .)

